Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 32
global.set $alloc_ptr
i32.const 31
i32.const 43
call $pair_con_i32_i32
i32.const 67
i32.const 93
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_(int * int)_(int * int)
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown operator or unexpected token
     --> <anon>:20:19
      |
   20 | call $pair_print_(int * int)_(int * int)
      |                   ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 32
global.set $alloc_ptr
i32.const 31
i32.const 43
call $pair_con_i32_i32
i32.const 71
i32.const 97
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_(int * int)_(int * int)
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown operator or unexpected token
     --> <anon>:20:19
      |
   20 | call $pair_print_(int * int)_(int * int)
      |                   ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 32
global.set $alloc_ptr
i32.const 13
i32.const 43
call $pair_con_i32_i32
i32.const 81
i32.const 79
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_(int * int)_(int * int)
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown operator or unexpected token
     --> <anon>:20:19
      |
   20 | call $pair_print_(int * int)_(int * int)
      |                   ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 32
global.set $alloc_ptr
i32.const 31
i32.const 23
call $pair_con_i32_i32
i32.const 45
i32.const 67
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_(int * int)_(int * int)
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown operator or unexpected token
     --> <anon>:20:19
      |
   20 | call $pair_print_(int * int)_(int * int)
      |                   ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_(int * int)_(int * int)(func (param $__pair i32) ))(type $pair_print_int_int(func (param $__pair i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_(int * int)_(int * int) (type $pair_print_(int * int)_(int * int))
(local $pair_addr i32)
call $print_lparen
i32.load offset=0 align=4
call $pair_print_int_int
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $pair_print_int_int
call $print_rparen
)(func $pair_print_int_int (type $pair_print_int_int)
(local $pair_addr i32)
call $print_lparen
i32.load offset=0 align=4
call $print_int
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $print_int
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 32
global.set $alloc_ptr
i32.const 123
i32.const 431
call $pair_con_i32_i32
i32.const 6779
i32.const 5467
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_(int * int)_(int * int)
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unexpected token, expected one of: `func`, `struct`, `array`
     --> <anon>:1:28
      |
    1 | (module (type $pair_print_(int * int)_(int * int)(func (param $__pair i32) ))(type $pair_print_int_int(func (param $__pair i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_(int * int)_(int * int) (type $pair_print_(int * int)_(int * int))
      |                            ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_i_x_i(func (param $__pair i32) ))(type $pair_print_i_x_i_x_i_x_i(func (param $__pair i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_i_x_i (type $pair_print_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__ptr
i32.load offset=0 align=4
call $print_int
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $print_int
call $print_rparen
)(func $pair_print_i_x_i_x_i_x_i (type $pair_print_i_x_i_x_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__ptr
i32.load offset=0 align=4
call $pair_print_i_x_i
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $pair_print_i_x_i
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 32
global.set $alloc_ptr
i32.const 13
i32.const 41
call $pair_con_i32_i32
i32.const 75
i32.const 93
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_i_x_i_x_i_x_i
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown local: failed to find name `$__ptr`
     --> <anon>:4:11
      |
    4 | local.get $__ptr
      |           ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_i_x_i(func (param $__pair i32) ))(type $pair_print_i_x_i_x_i_x_i(func (param $__pair i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_i_x_i (type $pair_print_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__ptr
i32.load offset=0 align=4
call $print_int
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $print_int
call $print_rparen
)(func $pair_print_i_x_i_x_i_x_i (type $pair_print_i_x_i_x_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__ptr
i32.load offset=0 align=4
call $pair_print_i_x_i
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $pair_print_i_x_i
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 32
global.set $alloc_ptr
i32.const 21
i32.const 43
call $pair_con_i32_i32
i32.const 75
i32.const 97
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_i_x_i_x_i_x_i
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown local: failed to find name `$__ptr`
     --> <anon>:4:11
      |
    4 | local.get $__ptr
      |           ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_i_x_i(func (param $__pair i32) ))(type $pair_print_i_x_i_x_i_x_i(func (param $__pair i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_i_x_i (type $pair_print_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__pair
i32.load offset=0 align=4
call $print_int
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $print_int
call $print_rparen
)(func $pair_print_i_x_i_x_i_x_i (type $pair_print_i_x_i_x_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__pair
i32.load offset=0 align=4
call $pair_print_i_x_i
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $pair_print_i_x_i
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 32
global.set $alloc_ptr
i32.const 31
i32.const 23
call $pair_con_i32_i32
i32.const 67
i32.const 83
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_i_x_i_x_i_x_i
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_i_x_i(func (param $__pair i32) ))(type $pair_print_i_x_i_x_i_x_i(func (param $__pair i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_i_x_i (type $pair_print_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__pair
i32.load offset=0 align=4
call $print_int
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $print_int
call $print_rparen
)(func $pair_print_i_x_i_x_i_x_i (type $pair_print_i_x_i_x_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__pair
i32.load offset=0 align=4
call $pair_print_i_x_i
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $pair_print_i_x_i
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $k i32)(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 44
global.set $alloc_ptr
i32.const 31
i32.const 23
call $pair_con_i32_i32
i32.const 67
i32.const 83
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_i_x_i_x_i_x_i
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
i32.const 31
i32.const 45
call $pair_con_i32_i32
local.set $k
call $print_val
call $print_space
i32.const 29
i32.const 1
call $print_string
call $print_equal
local.get $k
call $pair_print_i_x_i
call $print_colon
i32.const 30
i32.const 11
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 30
) "(int * int)")(data  $linear_memory(offset i32.const 29
) "k")(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_i_x_i(func (param $__pair i32) ))(type $pair_print_i_x_i_x_i_x_i(func (param $__pair i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_i_x_i (type $pair_print_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__pair
i32.load offset=0 align=4
call $print_int
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $print_int
call $print_rparen
)(func $pair_print_i_x_i_x_i_x_i (type $pair_print_i_x_i_x_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__pair
i32.load offset=0 align=4
call $pair_print_i_x_i
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $pair_print_i_x_i
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $j i32)(local $k i32)(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 48
global.set $alloc_ptr
i32.const 31
i32.const 23
call $pair_con_i32_i32
i32.const 67
i32.const 83
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_i_x_i_x_i_x_i
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
i32.const 31
i32.const 45
call $pair_con_i32_i32
local.set $k
call $print_val
call $print_space
i32.const 29
i32.const 1
call $print_string
call $print_equal
local.get $k
call $pair_print_i_x_i
call $print_colon
i32.const 30
i32.const 11
call $print_string
call $print_new_line
i32.const 0
local.set $j
call $print_val
call $print_space
i32.const 41
i32.const 1
call $print_string
call $print_equal
local.get $j
call $print_int
call $print_colon
i32.const 42
i32.const 3
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 42
) "int")(data  $linear_memory(offset i32.const 41
) "j")(data  $linear_memory(offset i32.const 30
) "(int * int)")(data  $linear_memory(offset i32.const 29
) "k")(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_b_x_b(func (param $__pair i32) ))(type $pair_print_i_x_i(func (param $__pair i32) ))(type $pair_print_i_x_i_x_i_x_i(func (param $__pair i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_b_x_b (type $pair_print_b_x_b)
(local $__pair i32)
call $print_lparen
local.get $__pair
i32.load offset=0 align=4
call $print_bool
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $print_bool
call $print_rparen
)(func $pair_print_i_x_i (type $pair_print_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__pair
i32.load offset=0 align=4
call $print_int
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $print_int
call $print_rparen
)(func $pair_print_i_x_i_x_i_x_i (type $pair_print_i_x_i_x_i_x_i)
(local $__pair i32)
call $print_lparen
local.get $__pair
i32.load offset=0 align=4
call $pair_print_i_x_i
call $print_comma
local.get $__pair
i32.load offset=4 align=4
call $pair_print_i_x_i
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $y i32)(local $j i32)(local $k i32)(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 60
global.set $alloc_ptr
i32.const 31
i32.const 23
call $pair_con_i32_i32
i32.const 67
i32.const 83
call $pair_con_i32_i32
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_i_x_i_x_i_x_i
call $print_colon
i32.const 2
i32.const 27
call $print_string
call $print_new_line
i32.const 31
i32.const 45
call $pair_con_i32_i32
local.set $k
call $print_val
call $print_space
i32.const 29
i32.const 1
call $print_string
call $print_equal
local.get $k
call $pair_print_i_x_i
call $print_colon
i32.const 30
i32.const 11
call $print_string
call $print_new_line
i32.const 0
local.set $j
call $print_val
call $print_space
i32.const 41
i32.const 1
call $print_string
call $print_equal
local.get $j
call $print_int
call $print_colon
i32.const 42
i32.const 3
call $print_string
call $print_new_line
i32.const 1
i32.const 0
call $pair_con_i32_i32
local.set $y
call $print_val
call $print_space
i32.const 45
i32.const 1
call $print_string
call $print_equal
local.get $y
call $pair_print_b_x_b
call $print_colon
i32.const 46
i32.const 13
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 46
) "(bool * bool)")(data  $linear_memory(offset i32.const 45
) "y")(data  $linear_memory(offset i32.const 42
) "int")(data  $linear_memory(offset i32.const 41
) "j")(data  $linear_memory(offset i32.const 30
) "(int * int)")(data  $linear_memory(offset i32.const 29
) "k")(data  $linear_memory(offset i32.const 2
) "((int * int) * (int * int))")(data  $linear_memory(offset i32.const 0
) "it"))
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_b_x_b(func (param $__pair_addr i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_b_x_b (type $pair_print_b_x_b)
(local $__pair i32)
call $print_lparen
local.get $__pair_addr
i32.load offset=0 align=4
call $print_bool
call $print_comma
local.get $__pair_addr
i32.load offset=4 align=4
call $print_bool
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $y i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 16
global.set $alloc_ptr
i32.const 1
i32.const 0
call $pair_con_i32_i32
local.set $y
call $print_val
call $print_space
i32.const 0
i32.const 1
call $print_string
call $print_equal
local.get $y
call $pair_print_b_x_b
call $print_colon
i32.const 1
i32.const 13
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 1
) "(bool * bool)")(data  $linear_memory(offset i32.const 0
) "y"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown local: failed to find name `$__pair_addr`
     --> <anon>:4:11
      |
    4 | local.get $__pair_addr
      |           ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_b_x_b(func (param $__pair_addr i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_b_x_b (type $pair_print_b_x_b)
(local $__pair_addr i32)
call $print_lparen
local.get $__pair_addr
i32.load offset=0 align=4
call $print_bool
call $print_comma
local.get $__pair_addr
i32.load offset=4 align=4
call $print_bool
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $y i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 16
global.set $alloc_ptr
i32.const 1
i32.const 0
call $pair_con_i32_i32
local.set $y
call $print_val
call $print_space
i32.const 0
i32.const 1
call $print_string
call $print_equal
local.get $y
call $pair_print_b_x_b
call $print_colon
i32.const 1
i32.const 13
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 1
) "(bool * bool)")(data  $linear_memory(offset i32.const 0
) "y"))
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_b_x_b(func (param $__pair_addr i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_b_x_b (type $pair_print_b_x_b)
(local $__pair_addr i32)
call $print_lparen
local.get $__pair_addr
i32.load offset=0 align=4
call $print_bool
call $print_comma
local.get $__pair_addr
i32.load offset=4 align=4
call $print_bool
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $h i32)(local $y i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 28
global.set $alloc_ptr
i32.const 1
i32.const 0
call $pair_con_i32_i32
local.set $y
call $print_val
call $print_space
i32.const 4
i32.const 1
call $print_string
call $print_equal
local.get $y
call $pair_print_b_x_b
call $print_colon
i32.const 5
i32.const 13
call $print_string
call $print_new_line
i32.const 8
call $alloc
local.tee $str_ptr
i32.const 0
i32.store offset=0 align=4
local.get $str_ptr
i32.const 4
i32.store offset=4 align=4
local.get $str_ptr
local.set $h
call $print_val
call $print_space
i32.const 18
i32.const 1
call $print_string
call $print_equal
local.get $h
local.tee $str_ptr
i32.load offset=0 align=4
local.get $str_ptr
i32.load offset=4 align=4
call $print_double_quote
call $print_string
call $print_double_quote
call $print_colon
i32.const 19
i32.const 6
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 19
) "string")(data  $linear_memory(offset i32.const 18
) "h")(data  $linear_memory(offset i32.const 5
) "(bool * bool)")(data  $linear_memory(offset i32.const 4
) "y")(data  $linear_memory(offset i32.const 0
) "true"))
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_b_x_b(func (param $__pair_addr i32) ))(type $pair_print_s_x_s(func (param $__pair_addr i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $pair_print_b_x_b (type $pair_print_b_x_b)
(local $__pair_addr i32)
call $print_lparen
local.get $__pair_addr
i32.load offset=0 align=4
call $print_bool
call $print_comma
local.get $__pair_addr
i32.load offset=4 align=4
call $print_bool
call $print_rparen
)(func $pair_print_s_x_s (type $pair_print_s_x_s)
(local $__pair_addr i32)
call $print_lparen
local.get $__pair_addr
i32.load offset=0 align=4
local.tee $str_ptr
i32.load offset=0 align=4
local.get $str_ptr
i32.load offset=4 align=4
call $print_double_quote
call $print_string
call $print_double_quote
call $print_comma
local.get $__pair_addr
i32.load offset=4 align=4
local.tee $str_ptr
i32.load offset=0 align=4
local.get $str_ptr
i32.load offset=4 align=4
call $print_double_quote
call $print_string
call $print_double_quote
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $b i32)(local $h i32)(local $y i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 56
global.set $alloc_ptr
i32.const 1
i32.const 0
call $pair_con_i32_i32
local.set $y
call $print_val
call $print_space
i32.const 13
i32.const 1
call $print_string
call $print_equal
local.get $y
call $pair_print_b_x_b
call $print_colon
i32.const 14
i32.const 13
call $print_string
call $print_new_line
i32.const 8
call $alloc
local.tee $str_ptr
i32.const 0
i32.store offset=0 align=4
local.get $str_ptr
i32.const 4
i32.store offset=4 align=4
local.get $str_ptr
local.set $h
call $print_val
call $print_space
i32.const 27
i32.const 1
call $print_string
call $print_equal
local.get $h
local.tee $str_ptr
i32.load offset=0 align=4
local.get $str_ptr
i32.load offset=4 align=4
call $print_double_quote
call $print_string
call $print_double_quote
call $print_colon
i32.const 28
i32.const 6
call $print_string
call $print_new_line
i32.const 8
call $alloc
local.tee $str_ptr
i32.const 9
i32.store offset=0 align=4
local.get $str_ptr
i32.const 4
i32.store offset=4 align=4
local.get $str_ptr
i32.const 8
call $alloc
local.tee $str_ptr
i32.const 4
i32.store offset=0 align=4
local.get $str_ptr
i32.const 5
i32.store offset=4 align=4
local.get $str_ptr
call $pair_con_i32_i32
local.set $b
call $print_val
call $print_space
i32.const 34
i32.const 1
call $print_string
call $print_equal
local.get $b
call $pair_print_s_x_s
call $print_colon
i32.const 35
i32.const 17
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 35
) "(string * string)")(data  $linear_memory(offset i32.const 34
) "b")(data  $linear_memory(offset i32.const 28
) "string")(data  $linear_memory(offset i32.const 27
) "h")(data  $linear_memory(offset i32.const 14
) "(bool * bool)")(data  $linear_memory(offset i32.const 13
) "y")(data  $linear_memory(offset i32.const 9
) "true")(data  $linear_memory(offset i32.const 4
) "false")(data  $linear_memory(offset i32.const 0
) "true"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown local: failed to find name `$str_ptr`
     --> <anon>:17:11
      |
   17 | local.tee $str_ptr
      |           ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $pair_print_s_x_b(func (param $__pair_addr i32) ))(type $alloc_sig(func (param $size i32) (result i32)))(type $pair_con_i32_i32(func (param $e1 i32)(param $e2 i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))
(func $pair_print_s_x_b (type $pair_print_s_x_b)
(local $str_ptr i32)
call $print_lparen
local.get $__pair_addr
i32.load offset=0 align=4
local.tee $str_ptr
i32.load offset=0 align=4
local.get $str_ptr
i32.load offset=4 align=4
call $print_double_quote
call $print_string
call $print_double_quote
call $print_comma
local.get $__pair_addr
i32.load offset=4 align=4
call $print_bool
call $print_rparen
)(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 24
global.set $alloc_ptr
i32.const 8
call $alloc
local.tee $str_ptr
i32.const 0
i32.store offset=0 align=4
local.get $str_ptr
i32.const 4
i32.store offset=4 align=4
local.get $str_ptr
i32.const 0
call $pair_con_i32_i32
local.set $it
call $print_val
call $print_space
i32.const 4
i32.const 2
call $print_string
call $print_equal
local.get $it
call $pair_print_s_x_b
call $print_colon
i32.const 6
i32.const 15
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $pair_con_i32_i32 (type $pair_con_i32_i32)
(local $pair_addr i32)
i32.const 8
call $alloc
local.tee $pair_addr
local.get 0
i32.store offset=0 align=4
local.get $pair_addr
local.get 1
i32.store offset=4 align=4
local.get $pair_addr
)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(data  $linear_memory(offset i32.const 6
) "(string * bool)")(data  $linear_memory(offset i32.const 4
) "it")(data  $linear_memory(offset i32.const 0
) "true"))
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown local: failed to find name `$__pair_addr`
     --> <anon>:4:11
      |
    4 | local.get $__pair_addr
      |           ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $funi->i->i(func (param $non_recursive_closure i32)(param $x i32) (result i32)))(type $funi->i(func (param $non_recursive_closure i32)(param $y i32) (result i32)))(type $alloc_sig(func (param $size i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $__cml_main (type $entry_point) 
(local $nested i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 28
global.set $alloc_ptr
i32.const 4
call $alloc
local.tee $closure_ptr
i32.const 0
local.set $__fptr
local.get $__fptr
i32.store offset=0 align=4
local.get $closure_ptr
local.set $nested
call $print_val
call $print_space
i32.const 0
i32.const 6
call $print_string
call $print_colon
i32.const 6
i32.const 21
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $funi->i->i0 (type $funi->i->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
local.get $non_recursive_closure
i32.load offset=0 align=4
local.set $__fptr
i32.const 8
call $alloc
local.tee $closure_ptr
i32.const 0
local.set $__fptr
local.get $__fptr
i32.store offset=0 align=4
local.get $closure_ptr
local.get $x
i32.store offset=4 align=4
local.get $closure_ptr
)(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $y i32) (result i32)
(local $x i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
local.get $non_recursive_closure
i32.load offset=4 align=4
local.set $x
local.get $non_recursive_closure
i32.load offset=0 align=4
local.set $__fptr
local.get $x
local.get $y
i32.add
)(table $funi->i->i 1 funcref)(table $funi->i 1 funcref)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(elem  (table $funi->i->i)(offset i32.const 0
)funcref (item ref.func $funi->i->i0
)
)(elem  (table $funi->i)(offset i32.const 0
)funcref (item ref.func $funi->i0
)
)(data  $linear_memory(offset i32.const 6
) "(int -> (int -> int))")(data  $linear_memory(offset i32.const 0
) "nested"))
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $funi->i->i(func (param $non_recursive_closure i32)(param $x i32) (result i32)))(type $funi->i(func (param $non_recursive_closure i32)(param $y i32) (result i32)))(type $alloc_sig(func (param $size i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $__cml_main (type $entry_point) 
(local $nested i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 28
global.set $alloc_ptr
i32.const 4
call $alloc
local.tee $closure_ptr
i32.const 0
local.set $__fptr
local.get $__fptr
i32.store offset=0 align=4
local.get $closure_ptr
local.set $nested
call $print_val
call $print_space
i32.const 0
i32.const 6
call $print_string
call $print_colon
i32.const 6
i32.const 21
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $funi->i->i0 (type $funi->i->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
local.get $non_recursive_closure
i32.load offset=0 align=4
local.set $__fptr
i32.const 8
call $alloc
local.tee $closure_ptr
i32.const 0
local.set $__fptr
local.get $__fptr
i32.store offset=0 align=4
local.get $closure_ptr
local.get $x
i32.store offset=4 align=4
local.get $closure_ptr
)(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $y i32) (result i32)
(local $x i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
local.get $non_recursive_closure
i32.load offset=4 align=4
local.set $x
local.get $non_recursive_closure
i32.load offset=0 align=4
local.set $__fptr
local.get $x
local.get $y
i32.add
)(table $funi->i->i 1 funcref)(table $funi->i 1 funcref)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(elem  (table $funi->i->i)(offset i32.const 0
)funcref (item ref.func $funi->i->i0
)
)(elem  (table $funi->i)(offset i32.const 0
)funcref (item ref.func $funi->i0
)
)(data  $linear_memory(offset i32.const 6
) "(int -> (int -> int))")(data  $linear_memory(offset i32.const 0
) "nested"))
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module (type $funi->i->i(func (param $non_recursive_closure i32)(param $x i32) (result i32)))(type $funi->i(func (param $non_recursive_closure i32)(param $y i32) (result i32)))(type $alloc_sig(func (param $size i32) (result i32)))(type $entry_point(func  ))(type $print_int(func (param $value i32) ))(type $print_bool(func (param $value i32) ))(type $print_string(func (param $ptr i32)(param $size i32) ))(type $print_token(func  ))(import "env" "linear_memory" (memory $linear_memory 2))(import "env" "print_int" (func $print_int (type $print_int)))(import "env" "print_bool" (func $print_bool (type $print_bool)))(import "env" "print_string" (func $print_string (type $print_string)))(import "env" "print_lparen" (func $print_lparen (type $print_token)))(import "env" "print_rparen" (func $print_rparen (type $print_token)))(import "env" "print_val" (func $print_val (type $print_token)))(import "env" "print_comma" (func $print_comma (type $print_token)))(import "env" "print_equal" (func $print_equal (type $print_token)))(import "env" "print_colon" (func $print_colon (type $print_token)))(import "env" "print_arrow" (func $print_arrow (type $print_token)))(import "env" "print_space" (func $print_space (type $print_token)))(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))(import "env" "print_new_line" (func $print_new_line (type $print_token)))(func $__cml_main (type $entry_point) 
(local $it i32)(local $nested i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 36
global.set $alloc_ptr
i32.const 4
call $alloc
local.tee $closure_ptr
i32.const 0
local.set $__fptr
local.get $__fptr
i32.store offset=0 align=4
local.get $closure_ptr
local.set $nested
call $print_val
call $print_space
i32.const 0
i32.const 6
call $print_string
call $print_colon
i32.const 6
i32.const 21
call $print_string
call $print_new_line
local.get $nested
local.tee $__fptr
i32.const 1
local.get $__fptr
i32.load offset=0 align=4
call_indirect $funi->i->i (type $funi->i->i)
local.tee $__fptr
i32.const 2
local.get $__fptr
i32.load offset=0 align=4
call_indirect $funi->i (type $funi->i)
local.set $it
call $print_val
call $print_space
i32.const 27
i32.const 2
call $print_string
call $print_equal
local.get $it
call $print_int
call $print_colon
i32.const 29
i32.const 3
call $print_string
call $print_new_line
)(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)(func $funi->i->i0 (type $funi->i->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
local.get $non_recursive_closure
i32.load offset=0 align=4
local.set $__fptr
i32.const 8
call $alloc
local.tee $closure_ptr
i32.const 0
local.set $__fptr
local.get $__fptr
i32.store offset=0 align=4
local.get $closure_ptr
local.get $x
i32.store offset=4 align=4
local.get $closure_ptr
)(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $y i32) (result i32)
(local $x i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
local.get $non_recursive_closure
i32.load offset=4 align=4
local.set $x
local.get $non_recursive_closure
i32.load offset=0 align=4
local.set $__fptr
local.get $x
local.get $y
i32.add
)(table $funi->i->i 1 funcref)(table $funi->i 1 funcref)(global $alloc_ptr(mut i32 ) i32.const 0
)(export "__cml_main" (func $__cml_main))(start $__cml_main)(elem  (table $funi->i->i)(offset i32.const 0
)funcref (item ref.func $funi->i->i0
)
)(elem  (table $funi->i)(offset i32.const 0
)funcref (item ref.func $funi->i0
)
)(data  $linear_memory(offset i32.const 29
) "int")(data  $linear_memory(offset i32.const 27
) "it")(data  $linear_memory(offset i32.const 6
) "(int -> (int -> int))")(data  $linear_memory(offset i32.const 0
) "nested"))
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 
(type $alloc_sig(func (param $size i32) (result i32)))
(type $entry_point(func  ))
(type $print_int(func (param $value i32) ))
(type $print_bool(func (param $value i32) ))
(type $print_string(func (param $ptr i32)(param $size i32) ))
(type $print_token(func  ))

(import "env" "linear_memory" (memory $linear_memory 2))
(import "env" "print_int" (func $print_int (type $print_int)))
(import "env" "print_bool" (func $print_bool (type $print_bool)))
(import "env" "print_string" (func $print_string (type $print_string)))
(import "env" "print_lparen" (func $print_lparen (type $print_token)))
(import "env" "print_rparen" (func $print_rparen (type $print_token)))
(import "env" "print_val" (func $print_val (type $print_token)))
(import "env" "print_comma" (func $print_comma (type $print_token)))
(import "env" "print_equal" (func $print_equal (type $print_token)))
(import "env" "print_colon" (func $print_colon (type $print_token)))
(import "env" "print_arrow" (func $print_arrow (type $print_token)))
(import "env" "print_space" (func $print_space (type $print_token)))
(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
(import "env" "print_new_line" (func $print_new_line (type $print_token)))

(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 8
global.set $alloc_ptr
i32.const 1234
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $print_int
call $print_colon
i32.const 2
i32.const 3
call $print_string
call $print_new_line
)
(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)



(global $alloc_ptr(mut i32 ) i32.const 0
)

(export "__cml_main" (func $__cml_main))

(start $__cml_main)

(data  $linear_memory(offset i32.const 2
) "int")
(data  $linear_memory(offset i32.const 0
) "it")

)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 
(type $alloc_sig(func (param $size i32) (result i32)))
(type $entry_point(func  ))
(type $print_int(func (param $value i32) ))
(type $print_bool(func (param $value i32) ))
(type $print_string(func (param $ptr i32)(param $size i32) ))
(type $print_token(func  ))

(import "env" "linear_memory" (memory $linear_memory 2))
(import "env" "print_int" (func $print_int (type $print_int)))
(import "env" "print_bool" (func $print_bool (type $print_bool)))
(import "env" "print_string" (func $print_string (type $print_string)))
(import "env" "print_lparen" (func $print_lparen (type $print_token)))
(import "env" "print_rparen" (func $print_rparen (type $print_token)))
(import "env" "print_val" (func $print_val (type $print_token)))
(import "env" "print_comma" (func $print_comma (type $print_token)))
(import "env" "print_equal" (func $print_equal (type $print_token)))
(import "env" "print_colon" (func $print_colon (type $print_token)))
(import "env" "print_arrow" (func $print_arrow (type $print_token)))
(import "env" "print_space" (func $print_space (type $print_token)))
(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
(import "env" "print_new_line" (func $print_new_line (type $print_token)))

(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 8
global.set $alloc_ptr
i32.const 12345
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $print_int
call $print_colon
i32.const 2
i32.const 3
call $print_string
call $print_new_line
)
(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)



(global $alloc_ptr (mut i32 ) i32.const 0
)

(export "__cml_main" (func $__cml_main))

(start $__cml_main)

(data $linear_memory(offset i32.const 2
) "int")
(data $linear_memory(offset i32.const 0
) "it")

)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 
(type $alloc_sig(func (param $size i32) (result i32)))
(type $entry_point(func  ))
(type $print_int(func (param $value i32) ))
(type $print_bool(func (param $value i32) ))
(type $print_string(func (param $ptr i32)(param $size i32) ))
(type $print_token(func  ))

(import "env" "linear_memory" (memory $linear_memory 2))
(import "env" "print_int" (func $print_int (type $print_int)))
(import "env" "print_bool" (func $print_bool (type $print_bool)))
(import "env" "print_string" (func $print_string (type $print_string)))
(import "env" "print_lparen" (func $print_lparen (type $print_token)))
(import "env" "print_rparen" (func $print_rparen (type $print_token)))
(import "env" "print_val" (func $print_val (type $print_token)))
(import "env" "print_comma" (func $print_comma (type $print_token)))
(import "env" "print_equal" (func $print_equal (type $print_token)))
(import "env" "print_colon" (func $print_colon (type $print_token)))
(import "env" "print_arrow" (func $print_arrow (type $print_token)))
(import "env" "print_space" (func $print_space (type $print_token)))
(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
(import "env" "print_new_line" (func $print_new_line (type $print_token)))

(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 8
global.set $alloc_ptr
i32.const 123
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $print_int
call $print_colon
i32.const 2
i32.const 3
call $print_string
call $print_new_line
)
(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)



(global $alloc_ptr (mut i32 ) i32.const 0
)

(export "__cml_main" (func $__cml_main))

(start $__cml_main)

(data $linear_memory(offset i32.const 2
) "int")
(data $linear_memory(offset i32.const 0
) "it")

)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 
(type $alloc_sig(func (param $size i32) (result i32)))
(type $entry_point(func  ))
(type $print_int(func (param $value i32) ))
(type $print_bool(func (param $value i32) ))
(type $print_string(func (param $ptr i32)(param $size i32) ))
(type $print_token(func  ))

(import "env" "linear_memory" (memory $linear_memory 2))
(import "env" "print_int" (func $print_int (type $print_int)))
(import "env" "print_bool" (func $print_bool (type $print_bool)))
(import "env" "print_string" (func $print_string (type $print_string)))
(import "env" "print_lparen" (func $print_lparen (type $print_token)))
(import "env" "print_rparen" (func $print_rparen (type $print_token)))
(import "env" "print_val" (func $print_val (type $print_token)))
(import "env" "print_comma" (func $print_comma (type $print_token)))
(import "env" "print_equal" (func $print_equal (type $print_token)))
(import "env" "print_colon" (func $print_colon (type $print_token)))
(import "env" "print_arrow" (func $print_arrow (type $print_token)))
(import "env" "print_space" (func $print_space (type $print_token)))
(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
(import "env" "print_new_line" (func $print_new_line (type $print_token)))

(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 8
global.set $alloc_ptr
i32.const 1234
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $print_int
call $print_colon
i32.const 2
i32.const 3
call $print_string
call $print_new_line
)
(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)



(global $alloc_ptr (mut i32) i32.const 0)

(export "__cml_main" (func $__cml_main))

(start $__cml_main)

(data $linear_memory(offset i32.const 2) "int")
(data $linear_memory(offset i32.const 0) "it")

)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 
(type $alloc_sig(func (param $size i32) (result i32)))
(type $entry_point(func  ))
(type $print_int(func (param $value i32) ))
(type $print_bool(func (param $value i32) ))
(type $print_string(func (param $ptr i32)(param $size i32) ))
(type $print_token(func  ))
(import "env" "linear_memory" (memory $linear_memory 2))
(import "env" "print_int" (func $print_int (type $print_int)))
(import "env" "print_bool" (func $print_bool (type $print_bool)))
(import "env" "print_string" (func $print_string (type $print_string)))
(import "env" "print_lparen" (func $print_lparen (type $print_token)))
(import "env" "print_rparen" (func $print_rparen (type $print_token)))
(import "env" "print_val" (func $print_val (type $print_token)))
(import "env" "print_comma" (func $print_comma (type $print_token)))
(import "env" "print_equal" (func $print_equal (type $print_token)))
(import "env" "print_colon" (func $print_colon (type $print_token)))
(import "env" "print_arrow" (func $print_arrow (type $print_token)))
(import "env" "print_space" (func $print_space (type $print_token)))
(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
(import "env" "print_new_line" (func $print_new_line (type $print_token)))
(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 8
global.set $alloc_ptr
i32.const 1234556
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $print_int
call $print_colon
i32.const 2
i32.const 3
call $print_string
call $print_new_line
)
(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)
(global $alloc_ptr (mut i32) i32.const 0)
(export "__cml_main" (func $__cml_main))
(start $__cml_main)(data $linear_memory(offset i32.const 2) "int")
(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 
(type $alloc_sig(func (param $size i32) (result i32) ))
(type $entry_point(func))
(type $print_int(func (param $value i32)))
(type $print_bool(func (param $value i32)))
(type $print_string(func (param $ptr i32)(param $size i32)))
(type $print_token(func))
(import "env" "linear_memory" (memory $linear_memory 2))
(import "env" "print_int" (func $print_int (type $print_int)))
(import "env" "print_bool" (func $print_bool (type $print_bool)))
(import "env" "print_string" (func $print_string (type $print_string)))
(import "env" "print_lparen" (func $print_lparen (type $print_token)))
(import "env" "print_rparen" (func $print_rparen (type $print_token)))
(import "env" "print_val" (func $print_val (type $print_token)))
(import "env" "print_comma" (func $print_comma (type $print_token)))
(import "env" "print_equal" (func $print_equal (type $print_token)))
(import "env" "print_colon" (func $print_colon (type $print_token)))
(import "env" "print_arrow" (func $print_arrow (type $print_token)))
(import "env" "print_space" (func $print_space (type $print_token)))
(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
(import "env" "print_new_line" (func $print_new_line (type $print_token)))
(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 8
global.set $alloc_ptr
i32.const 1234
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $print_int
call $print_colon
i32.const 2
i32.const 3
call $print_string
call $print_new_line
)
(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)
(global $alloc_ptr (mut i32) i32.const 0)
(export "__cml_main" (func $__cml_main))
(start $__cml_main)(data $linear_memory(offset i32.const 2) "int")
(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
i32.const 8
global.set $alloc_ptr
i32.const 1234
local.set $it
call $print_val
call $print_space
i32.const 0
i32.const 2
call $print_string
call $print_equal
local.get $it
call $print_int
call $print_colon
i32.const 2
i32.const 3
call $print_string
call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
global.get $alloc_ptr
local.set $old
local.get $old
local.get $size
i32.add
global.set $alloc_ptr
local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "int")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 0
	i32.const 1
	i32.eq
	if (result i32)		i32.const 1		i32.const 0
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_bool
	call $print_colon
	i32.const 2
	i32.const 4
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "bool")
	(data $linear_memory(offset i32.const 0) "it")
)
Failed to compile Wasm Validation error: type mismatch: expected i32 but nothing on stack (at offset 0x180)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 32
	i32.const 21
	i32.eq
	if (result i32)		i32.const 1	else		i32.const 0	end
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_bool
	call $print_colon
	i32.const 2
	i32.const 4
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "bool")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 0
	i32.const 30
	i32.eq
	if 
(result i32)		i32.const 1
	else
		i32.const 0
	end
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_bool
	call $print_colon
	i32.const 2
	i32.const 4
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "bool")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
(local $it i32)(local $str_ptr i32)(local $closure_ptr i32)(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 0
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 1
	else
		i32.const 0
	end
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_bool
	call $print_colon
	i32.const 2
	i32.const 4
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "bool")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $it i32)	(local $str_ptr i32)	(local $closure_ptr i32)	(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 0
	i32.const 2
	i32.eq
	if (result i32)
		i32.const 1
	else
		i32.const 56
	end
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_int
	call $print_colon
	i32.const 2
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "int")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module 	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)

	i32.const 8
	global.set $alloc_ptr
	i32.const 12
	i32.const 12
	i32.eq
	if (result i32)
		i32.const 1
	else
		i32.const 0
	end
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_bool
	call $print_colon
	i32.const 2
	i32.const 4
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)

	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "bool")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 0
	i32.const 2
	i32.eq
	if (result i32)
		i32.const 1
	else
		i32.const 0
	end
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_bool
	call $print_colon
	i32.const 2
	i32.const 4
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "bool")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 12345
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_int
	call $print_colon
	i32.const 2
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "int")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 12345
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_int
	call $print_colon
	i32.const 2
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "int")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 12345
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_int
	call $print_colon
	i32.const 2
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "int")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $y i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 24
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_colon
	i32.const 2
	i32.const 21
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $funi->i->i0 (type $funi->i->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $x
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $y i32) (result i32)
	(local $x i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $x
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $y
	i32.add
)
	(table $funi->i->i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i->i)(offset i32.const 0)funcref (item ref.func $funi->i->i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 2) "(int -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $y i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 24
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_colon
	i32.const 2
	i32.const 21
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $funi->i->i0 (type $funi->i->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $x
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $y i32) (result i32)
	(local $x i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $x
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $y
	i32.add
)
	(table $funi->i->i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i->i)(offset i32.const 0)funcref (item ref.func $funi->i->i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 2) "(int -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $y i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $k i32)
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 28
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_colon
	i32.const 2
	i32.const 21
	call $print_string
	call $print_new_line
	local.get $it
	local.tee $__fptr
	i32.const 32
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i->i (type $funi->i->i)
	local.tee $__fptr
	i32.const 45
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.set $k
	call $print_val
	call $print_space
	i32.const 23
	i32.const 1
	call $print_string
	call $print_equal
	local.get $k
	call $print_int
	call $print_colon
	i32.const 24
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $funi->i->i0 (type $funi->i->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $x
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $y i32) (result i32)
	(local $x i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $x
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $y
	i32.add
)
	(table $funi->i->i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i->i)(offset i32.const 0)funcref (item ref.func $funi->i->i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 24) "int")
	(data $linear_memory(offset i32.const 23) "k")
	(data $linear_memory(offset i32.const 2) "(int -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funa->a*a(func (param $f i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 20
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funa->a*a0 (type $funa->a*a)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funa->a*a 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funa->a*a)(offset i32.const 0)funcref (item ref.func $funa->a*a0)
)
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funa->a*a(func (param $f i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*i>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*i> (type $pair_print_<i*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $k i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 32
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
	local.get $f
	local.tee $__fptr
	i32.const 1234
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i*i (type $funi->i*i)
	local.set $k
	call $print_val
	call $print_space
	i32.const 18
	i32.const 1
	call $print_string
	call $print_equal
	local.get $k
	call $pair_print_<i*i>
	call $print_colon
	i32.const 19
	i32.const 11
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funa->a*a0 (type $funa->a*a)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funa->a*a 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funa->a*a)(offset i32.const 0)funcref (item ref.func $funa->a*a0)
)
	(data $linear_memory(offset i32.const 19) "(int * int)")
	(data $linear_memory(offset i32.const 18) "k")
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown table: failed to find name `$funi->i*i`
     --> <anon>:69:16
      |
   69 |     call_indirect $funi->i*i (type $funi->i*i)
      |                ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funa->a*a(func (param $f i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 20
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funa->a*a0 (type $funa->a*a)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funa->a*a 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funa->a*a)(offset i32.const 0)funcref (item ref.func $funa->a*a0)
)
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funa->a*a(func (param $f i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*i>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*i> (type $pair_print_<i*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $d i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 32
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
	local.get $f
	local.tee $__fptr
	i32.const 1234
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i*i (type $funi->i*i)
	local.set $d
	call $print_val
	call $print_space
	i32.const 18
	i32.const 1
	call $print_string
	call $print_equal
	local.get $d
	call $pair_print_<i*i>
	call $print_colon
	i32.const 19
	i32.const 11
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funa->a*a0 (type $funa->a*a)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funa->a*a 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funa->a*a)(offset i32.const 0)funcref (item ref.func $funa->a*a0)
)
	(data $linear_memory(offset i32.const 19) "(int * int)")
	(data $linear_memory(offset i32.const 18) "d")
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown table: failed to find name `$funi->i*i`
     --> <anon>:69:16
      |
   69 |     call_indirect $funi->i*i (type $funi->i*i)
      |                ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 20
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 18
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 1
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi->i*i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 1) "('a -> ('a * int))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*i>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*i> (type $pair_print_<i*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 36
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 18
	call $print_string
	call $print_new_line
	local.get $f
	local.tee $__fptr
	i32.const 1234
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i*i (type $funi->i*i)
	local.set $it
	call $print_val
	call $print_space
	i32.const 19
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<i*i>
	call $print_colon
	i32.const 21
	i32.const 11
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 1
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi->i*i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 21) "(int * int)")
	(data $linear_memory(offset i32.const 19) "it")
	(data $linear_memory(offset i32.const 1) "('a -> ('a * int))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<<i*i>*i>(func (param $__pair_addr i32)))
	(type $pair_print_<i*i>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<<i*i>*i> (type $pair_print_<<i*i>*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $pair_print_<i*i>
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $pair_print_<i*i> (type $pair_print_<i*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $h i32)
	(local $it i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 56
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 18
	call $print_string
	call $print_new_line
	local.get $f
	local.tee $__fptr
	i32.const 1234
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i*i (type $funi->i*i)
	local.set $it
	call $print_val
	call $print_space
	i32.const 19
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<i*i>
	call $print_colon
	i32.const 21
	i32.const 11
	call $print_string
	call $print_new_line
	local.get $f
	local.tee $__fptr
	i32.const 432
	i32.const 644
	call $pair_con_nogc_i32_nogc_i32
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi*i->i*i*i (type $funi*i->i*i*i)
	local.set $h
	call $print_val
	call $print_space
	i32.const 32
	i32.const 1
	call $print_string
	call $print_equal
	local.get $h
	call $pair_print_<<i*i>*i>
	call $print_colon
	i32.const 33
	i32.const 19
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 1
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi->i*i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 33) "((int * int) * int)")
	(data $linear_memory(offset i32.const 32) "h")
	(data $linear_memory(offset i32.const 21) "(int * int)")
	(data $linear_memory(offset i32.const 19) "it")
	(data $linear_memory(offset i32.const 1) "('a -> ('a * int))")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown table: failed to find name `$funi*i->i*i*i`
     --> <anon>:105:16
      |
  105 |     call_indirect $funi*i->i*i*i (type $funi*i->i*i*i)
      |                ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 20
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi->i*i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<#a_:?a-><?a*?a>#*i>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<#a_:?a-><?a*?a>#*i> (type $pair_print_<#a_:?a-><?a*?a>#*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_polyfn
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $k i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 52
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
	local.get $f
	i32.const 12345
	call $pair_con_gc_i32_nogc_i32
	local.set $k
	call $print_val
	call $print_space
	i32.const 18
	i32.const 1
	call $print_string
	call $print_equal
	local.get $k
	call $pair_print_<#a_:?a-><?a*?a>#*i>
	call $print_colon
	i32.const 19
	i32.const 29
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_nogc_i32 (type $pair_con_gc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi->i*i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 19) "([a.('a -> ('a * 'a))] * int)")
	(data $linear_memory(offset i32.const 18) "k")
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown func: failed to find name `$print_polyfn`
     --> <anon>:31:7
      |
   31 |     call $print_polyfn
      |       ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b-><?b*?b>>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b-><?b*?b>> (type $pair_print_<?a-><?a*?a>*?b-><?b*?b>>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	i32.const 1
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	i32.const 18
	i32.const 17
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $h i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 76
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 1
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $h
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_equal
	local.get $h
	call $pair_print_<?a-><?a*?a>*?b-><?b*?b>>
	call $print_colon
	i32.const 35
	i32.const 39
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i1 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $y i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $y
	local.get $y
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi->i*i 2 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i1)
(item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 35) "(('a -> ('a * 'a)) * ('b -> ('b * 'b)))")
	(data $linear_memory(offset i32.const 18) "('b -> ('b * 'b))")
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "h")
)
Failed to compile Wasm Validation error: type mismatch: values remaining on stack at end of block (at offset 0x1a1)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b-><?b*?b>>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b-><?b*?b>> (type $pair_print_<?a-><?a*?a>*?b-><?b*?b>>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 17
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 76
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 1
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b-><?b*?b>>
	call $print_colon
	i32.const 36
	i32.const 39
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i1 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $y i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $y
	local.get $y
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi->i*i 2 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i1)
(item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 36) "(('a -> ('a * 'a)) * ('b -> ('b * 'b)))")
	(data $linear_memory(offset i32.const 19) "('b -> ('b * 'b))")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 64
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 64
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 64
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 64
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $h i32)
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 68
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
	local.get $it
	i32.load offset=4 align=4
	local.tee $__fptr
	i32.const 12345
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.set $h
	call $print_val
	call $print_space
	i32.const 61
	i32.const 1
	call $print_string
	call $print_equal
	local.get $h
	call $print_int
	call $print_colon
	i32.const 62
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 62) "int")
	(data $linear_memory(offset i32.const 61) "h")
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 64
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $h i32)
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 68
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
	local.get $it
	i32.load offset=4 align=4
	local.tee $__fptr
	i32.const 12345
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.set $h
	call $print_val
	call $print_space
	i32.const 61
	i32.const 1
	call $print_string
	call $print_equal
	local.get $h
	call $print_int
	call $print_colon
	i32.const 62
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 62) "int")
	(data $linear_memory(offset i32.const 61) "h")
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 64
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $h i32)
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 68
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
	local.get $it
	i32.load offset=4 align=4
	local.tee $__fptr
	i32.const 12345
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.set $h
	call $print_val
	call $print_space
	i32.const 61
	i32.const 1
	call $print_string
	call $print_equal
	local.get $h
	call $print_int
	call $print_colon
	i32.const 62
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 62) "int")
	(data $linear_memory(offset i32.const 61) "h")
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<?a-><?a*?a>*?b->?b>(func (param $__pair_addr i32)))
	(type $pair_print_<i*i>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_gc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<?a-><?a*?a>*?b->?b> (type $pair_print_<?a-><?a*?a>*?b->?b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 2
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	drop
	i32.const 19
	i32.const 10
	call $print_string
	call $print_rparen
)
	(func $pair_print_<i*i> (type $pair_print_<i*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $j i32)
	(local $h i32)
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 80
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	call $pair_con_gc_i32_gc_i32
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $pair_print_<?a-><?a*?a>*?b->?b>
	call $print_colon
	i32.const 29
	i32.const 32
	call $print_string
	call $print_new_line
	local.get $it
	i32.load offset=4 align=4
	local.tee $__fptr
	i32.const 12345
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.set $h
	call $print_val
	call $print_space
	i32.const 61
	i32.const 1
	call $print_string
	call $print_equal
	local.get $h
	call $print_int
	call $print_colon
	i32.const 62
	i32.const 3
	call $print_string
	call $print_new_line
	local.get $it
	i32.load offset=0 align=4
	local.tee $__fptr
	i32.const 12345
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i*i (type $funi->i*i)
	local.set $j
	call $print_val
	call $print_space
	i32.const 65
	i32.const 1
	call $print_string
	call $print_equal
	local.get $j
	call $pair_print_<i*i>
	call $print_colon
	i32.const 66
	i32.const 11
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_gc_i32 (type $pair_con_gc_i32_gc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 66) "(int * int)")
	(data $linear_memory(offset i32.const 65) "j")
	(data $linear_memory(offset i32.const 62) "int")
	(data $linear_memory(offset i32.const 61) "h")
	(data $linear_memory(offset i32.const 29) "(('a -> ('a * 'a)) * ('b -> 'b))")
	(data $linear_memory(offset i32.const 19) "('b -> 'b)")
	(data $linear_memory(offset i32.const 2) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i->i->i(func (param $f i32)(param $g i32) (result i32) ))
	(type $funi->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 32
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 30
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $funi->i->i->i0 (type $funi->i->i->i)(param $f i32)(param $g i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $g
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $g i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $g
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $g
	local.tee $__fptr
	local.get $x
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.get $g
	local.tee $__fptr
	i32.const 123
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	i32.add
)
	(table $funi->i->i->i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i->i->i)(offset i32.const 0)funcref (item ref.func $funi->i->i->i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 1) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i(func (param $non_recursive_closure i32)(param $z i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $y i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 36
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 30
	call $print_string
	call $print_new_line
	local.get $f
	local.tee $__fptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 1
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i->i->i (type $funi->i->i->i)
	local.tee $__fptr
	i32.const 456
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.set $y
	call $print_val
	call $print_space
	i32.const 31
	i32.const 1
	call $print_string
	call $print_equal
	local.get $y
	call $print_int
	call $print_colon
	i32.const 32
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $funi->i1 (type $funi->i)(param $non_recursive_closure i32)(param $z i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $z
	i32.const 2
	i32.mul
)
	(func $funi->i->i->i0 (type $funi->i->i->i)(param $f i32)(param $g i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $g
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $g i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $g
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $g
	local.tee $__fptr
	local.get $x
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.get $g
	local.tee $__fptr
	i32.const 123
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	i32.add
)
	(table $funi->i 2 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i1)
(item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 32) "int")
	(data $linear_memory(offset i32.const 31) "y")
	(data $linear_memory(offset i32.const 1) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown table: failed to find name `$funi->i->i->i`
     --> <anon>:62:16
      |
   62 |     call_indirect $funi->i->i->i (type $funi->i->i->i)
      |                ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i(func (param $non_recursive_closure i32)(param $z i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $y i32)
	(local $y i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 40
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 30
	call $print_string
	call $print_new_line
	local.get $f
	local.tee $__fptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 1
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i->i->i (type $funi->i->i->i)
	local.tee $__fptr
	i32.const 456
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.set $y
	call $print_val
	call $print_space
	i32.const 31
	i32.const 1
	call $print_string
	call $print_equal
	local.get $y
	call $print_int
	call $print_colon
	i32.const 32
	i32.const 3
	call $print_string
	call $print_new_line
	local.get $f
	local.tee $__fptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 2
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i->i->i (type $funi->i->i->i)
	local.tee $__fptr
	i32.const 456
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.set $y
	call $print_val
	call $print_space
	i32.const 35
	i32.const 1
	call $print_string
	call $print_equal
	local.get $y
	call $print_int
	call $print_colon
	i32.const 36
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $funi->i2 (type $funi->i)(param $non_recursive_closure i32)(param $z i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $z
	i32.const 2
	i32.mul
)
	(func $funi->i1 (type $funi->i)(param $non_recursive_closure i32)(param $z i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $z
	i32.const 2
	i32.mul
)
	(func $funi->i->i->i0 (type $funi->i->i->i)(param $f i32)(param $g i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $g
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $funi->i0 (type $funi->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $g i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $g
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $g
	local.tee $__fptr
	local.get $x
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	local.get $g
	local.tee $__fptr
	i32.const 123
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i (type $funi->i)
	i32.add
)
	(table $funi->i 3 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i2)
(item ref.func $funi->i1)
(item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 36) "int")
	(data $linear_memory(offset i32.const 35) "y")
	(data $linear_memory(offset i32.const 32) "int")
	(data $linear_memory(offset i32.const 31) "y")
	(data $linear_memory(offset i32.const 1) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: duplicate local identifier
     --> <anon>:25:9
      |
   25 |     (local $y i32)
      |         ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i(func (param $f i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 16
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 12
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $funi->i0 (type $funi->i)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 1
	else
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul

	end
)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 1) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm Validation error: type mismatch: values remaining on stack at end of block (at offset 0x28a)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $f i32)(param $x i32) (result i32) ))
	(type $funi->i(func (param $f i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 40
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 18
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 19
	i32.const 17
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(func $funi->i0 (type $funi->i)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 1
	else
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		local.get $x
		i32.mul

	end
)
	(table $funi->i*i 1 funcref)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 19) "('d -> ('d * 'd))")
	(data $linear_memory(offset i32.const 18) "f")
	(data $linear_memory(offset i32.const 1) "('d -> ('d * 'd))")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: duplicate local identifier
     --> <anon>:27:9
      |
   27 |     (local $f i32)
      |         ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i*i(func (param $f i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 20
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi->i*i0 (type $funi->i*i)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi->i*i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi*i->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i*i(func (param $f i32)(param $x i32) (result i32) ))
	(type $pair_print_<<?d*?e>->?e*i>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<<?d*?e>->?e*i> (type $pair_print_<<?d*?e>->?e*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 19
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $t i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 64
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 123
	call $pair_con_gc_i32_nogc_i32
	local.set $t
	call $print_val
	call $print_space
	i32.const 18
	i32.const 1
	call $print_string
	call $print_equal
	local.get $t
	call $pair_print_<<?d*?e>->?e*i>
	call $print_colon
	i32.const 36
	i32.const 25
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_nogc_i32 (type $pair_con_gc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi*i->i0 (type $funi*i->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.load offset=4 align=4
)
	(func $funi->i*i0 (type $funi->i*i)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi*i->i 1 funcref)
	(table $funi->i*i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi*i->i)(offset i32.const 0)funcref (item ref.func $funi*i->i0)
)
	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 36) "((('d * 'e) -> 'e) * int)")
	(data $linear_memory(offset i32.const 19) "(('d * 'e) -> 'e)")
	(data $linear_memory(offset i32.const 18) "t")
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi*i->i(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $funi->i*i(func (param $f i32)(param $x i32) (result i32) ))
	(type $pair_print_<<?d*?e>->?e*i>(func (param $__pair_addr i32)))
	(type $pair_print_<i*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<<?d*?e>->?e*i> (type $pair_print_<<?d*?e>->?e*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 22
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $pair_print_<i*s> (type $pair_print_<i*s>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $y i32)
	(local $t i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 80
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 3
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 4
	i32.const 17
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 123
	call $pair_con_gc_i32_nogc_i32
	local.set $t
	call $print_val
	call $print_space
	i32.const 21
	i32.const 1
	call $print_string
	call $print_equal
	local.get $t
	call $pair_print_<<?d*?e>->?e*i>
	call $print_colon
	i32.const 39
	i32.const 25
	call $print_string
	call $print_new_line
	local.get $t
	i32.load offset=0 align=4
	local.tee $__fptr
	local.get $f
	local.tee $__fptr
	i32.const 456
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi->i*i (type $funi->i*i)
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funi*i->i (type $funi*i->i)
	local.get $t
	i32.load offset=0 align=4
	local.tee $__fptr
	local.get $f
	local.tee $__fptr
	i32.const 8
	call $alloc
	local.tee $str_ptr
	i32.const 0
	i32.store offset=0 align=4
	local.get $str_ptr
	i32.const 3
	i32.store offset=4 align=4
	local.get $str_ptr
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funs->s*s (type $funs->s*s)
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $funs*s->s (type $funs*s->s)
	call $pair_con_nogc_i32_nogc_i32
	local.set $y
	call $print_val
	call $print_space
	i32.const 64
	i32.const 1
	call $print_string
	call $print_equal
	local.get $y
	call $pair_print_<i*s>
	call $print_colon
	i32.const 65
	i32.const 14
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_nogc_i32 (type $pair_con_gc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $funi*i->i0 (type $funi*i->i)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.load offset=4 align=4
)
	(func $funi->i*i0 (type $funi->i*i)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $funi*i->i 1 funcref)
	(table $funi->i*i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi*i->i)(offset i32.const 0)funcref (item ref.func $funi*i->i0)
)
	(elem (table $funi->i*i)(offset i32.const 0)funcref (item ref.func $funi->i*i0)
)
	(data $linear_memory(offset i32.const 65) "(int * string)")
	(data $linear_memory(offset i32.const 64) "y")
	(data $linear_memory(offset i32.const 39) "((('d * 'e) -> 'e) * int)")
	(data $linear_memory(offset i32.const 22) "(('d * 'e) -> 'e)")
	(data $linear_memory(offset i32.const 21) "t")
	(data $linear_memory(offset i32.const 4) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 3) "f")
	(data $linear_memory(offset i32.const 0) "abc")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: unknown table: failed to find name `$funs->s*s`
     --> <anon>:141:16
      |
  141 |     call_indirect $funs->s*s (type $funs->s*s)
      |                ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $f i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 16
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 12
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $function0 (type $function)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 1
	else
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul

	end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 1) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm Validation error: type mismatch: values remaining on stack at end of block (at offset 0x28a)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $f i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 16
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 12
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $function0 (type $function)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 1
	else
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul
		local.get $f
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul

	end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 1) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "f")
)
Failed to compile Wasm Validation error: type mismatch: values remaining on stack at end of block (at offset 0x28a)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $f i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 20
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $function0 (type $function)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<<?d*?e>->?e*i>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<<?d*?e>->?e*i> (type $pair_print_<<?d*?e>->?e*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 19
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $t i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 64
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 17
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 1
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 123
	call $pair_con_gc_i32_nogc_i32
	local.set $t
	call $print_val
	call $print_space
	i32.const 18
	i32.const 1
	call $print_string
	call $print_equal
	local.get $t
	call $pair_print_<<?d*?e>->?e*i>
	call $print_colon
	i32.const 36
	i32.const 25
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_nogc_i32 (type $pair_con_gc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $function1 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.load offset=4 align=4
)
	(func $function0 (type $function)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $function 2 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 36) "((('d * 'e) -> 'e) * int)")
	(data $linear_memory(offset i32.const 19) "(('d * 'e) -> 'e)")
	(data $linear_memory(offset i32.const 18) "t")
	(data $linear_memory(offset i32.const 1) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 0) "f")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<<?d*?e>->?e*i>(func (param $__pair_addr i32)))
	(type $pair_print_<i*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<<?d*?e>->?e*i> (type $pair_print_<<?d*?e>->?e*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 22
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $pair_print_<i*s> (type $pair_print_<i*s>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $y i32)
	(local $t i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 80
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 3
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 4
	i32.const 17
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 1
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 123
	call $pair_con_gc_i32_nogc_i32
	local.set $t
	call $print_val
	call $print_space
	i32.const 21
	i32.const 1
	call $print_string
	call $print_equal
	local.get $t
	call $pair_print_<<?d*?e>->?e*i>
	call $print_colon
	i32.const 39
	i32.const 25
	call $print_string
	call $print_new_line
	local.get $t
	i32.load offset=0 align=4
	local.tee $__fptr
	local.get $f
	local.tee $__fptr
	i32.const 456
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $t
	i32.load offset=0 align=4
	local.tee $__fptr
	local.get $f
	local.tee $__fptr
	i32.const 8
	call $alloc
	local.tee $str_ptr
	i32.const 0
	i32.store offset=0 align=4
	local.get $str_ptr
	i32.const 3
	i32.store offset=4 align=4
	local.get $str_ptr
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	call $pair_con_nogc_i32_nogc_i32
	local.set $y
	call $print_val
	call $print_space
	i32.const 64
	i32.const 1
	call $print_string
	call $print_equal
	local.get $y
	call $pair_print_<i*s>
	call $print_colon
	i32.const 65
	i32.const 14
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_nogc_i32 (type $pair_con_gc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $function1 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.load offset=4 align=4
)
	(func $function0 (type $function)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $function 2 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 65) "(int * string)")
	(data $linear_memory(offset i32.const 64) "y")
	(data $linear_memory(offset i32.const 39) "((('d * 'e) -> 'e) * int)")
	(data $linear_memory(offset i32.const 22) "(('d * 'e) -> 'e)")
	(data $linear_memory(offset i32.const 21) "t")
	(data $linear_memory(offset i32.const 4) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 3) "f")
	(data $linear_memory(offset i32.const 0) "abc")
)
generated imports
RuntimeError: out of bounds memory access
    at pair_print_<i*s> (<module>[14]:0x1ba)
    at __cml_main (<module>[15]:0x28e)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<<?d*?e>->?e*i>(func (param $__pair_addr i32)))
	(type $pair_print_<i*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<<?d*?e>->?e*i> (type $pair_print_<<?d*?e>->?e*i>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	drop
	i32.const 22
	i32.const 17
	call $print_string
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_int
	call $print_rparen
)
	(func $pair_print_<i*s> (type $pair_print_<i*s>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $j i32)
	(local $y i32)
	(local $t i32)
	(local $f i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 84
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 0
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $f
	call $print_val
	call $print_space
	i32.const 3
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 4
	i32.const 17
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	i32.const 1
	local.set $__fptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	i32.const 123
	call $pair_con_gc_i32_nogc_i32
	local.set $t
	call $print_val
	call $print_space
	i32.const 21
	i32.const 1
	call $print_string
	call $print_equal
	local.get $t
	call $pair_print_<<?d*?e>->?e*i>
	call $print_colon
	i32.const 39
	i32.const 25
	call $print_string
	call $print_new_line
	local.get $t
	i32.load offset=0 align=4
	local.tee $__fptr
	local.get $f
	local.tee $__fptr
	i32.const 456
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $t
	i32.load offset=0 align=4
	local.tee $__fptr
	local.get $f
	local.tee $__fptr
	i32.const 8
	call $alloc
	local.tee $str_ptr
	i32.const 0
	i32.store offset=0 align=4
	local.get $str_ptr
	i32.const 3
	i32.store offset=4 align=4
	local.get $str_ptr
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	call $pair_con_nogc_i32_nogc_i32
	local.set $y
	call $print_val
	call $print_space
	i32.const 64
	i32.const 1
	call $print_string
	call $print_equal
	local.get $y
	call $pair_print_<i*s>
	call $print_colon
	i32.const 65
	i32.const 14
	call $print_string
	call $print_new_line
	i32.const 0
	i32.const 1
	i32.eq
	if (result i32)
		i32.const 1
	else
		i32.const 2
	end
	local.set $j
	call $print_val
	call $print_space
	i32.const 79
	i32.const 1
	call $print_string
	call $print_equal
	local.get $j
	call $print_int
	call $print_colon
	i32.const 80
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_gc_i32_nogc_i32 (type $pair_con_gc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $function1 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.load offset=4 align=4
)
	(func $function0 (type $function)(param $f i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $f
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	local.get $x
	call $pair_con_nogc_i32_nogc_i32
)
	(table $function 2 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 80) "int")
	(data $linear_memory(offset i32.const 79) "j")
	(data $linear_memory(offset i32.const 65) "(int * string)")
	(data $linear_memory(offset i32.const 64) "y")
	(data $linear_memory(offset i32.const 39) "((('d * 'e) -> 'e) * int)")
	(data $linear_memory(offset i32.const 22) "(('d * 'e) -> 'e)")
	(data $linear_memory(offset i32.const 21) "t")
	(data $linear_memory(offset i32.const 4) "('a -> ('a * 'a))")
	(data $linear_memory(offset i32.const 3) "f")
	(data $linear_memory(offset i32.const 0) "abc")
)
generated imports
RuntimeError: out of bounds memory access
    at pair_print_<i*s> (<module>[14]:0x1ba)
    at __cml_main (<module>[15]:0x28e)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $fact i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $fact i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 20
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $fact
	call $print_val
	call $print_space
	i32.const 0
	i32.const 4
	call $print_string
	call $print_colon
	i32.const 4
	i32.const 12
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $function0 (type $function)(param $fact i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $fact
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 1
	else
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.mul

	end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 4) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fact")
)
Failed to compile Wasm Validation error: type mismatch: values remaining on stack at end of block (at offset 0x286)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $funi->i(func (param $fact i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $fact i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 20
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $fact
	call $print_val
	call $print_space
	i32.const 0
	i32.const 4
	call $print_string
	call $print_colon
	i32.const 4
	i32.const 12
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $funi->i0 (type $funi->i)(param $fact i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $fact
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 1
	else
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul
		local.get $x
		local.get $fact
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $funi->i (type $funi->i)
		i32.mul

	end
)
	(table $funi->i 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $funi->i)(offset i32.const 0)funcref (item ref.func $funi->i0)
)
	(data $linear_memory(offset i32.const 4) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fact")
)
Failed to compile Wasm Validation error: type mismatch: values remaining on stack at end of block (at offset 0x286)
