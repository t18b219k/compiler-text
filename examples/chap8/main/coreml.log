Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $it i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 12345
	local.set $it
	call $print_val
	call $print_space
	i32.const 0
	i32.const 2
	call $print_string
	call $print_equal
	local.get $it
	call $print_int
	call $print_colon
	i32.const 2
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "int")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $x i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $x
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_equal
	local.get $x
	call $print_int
	call $print_colon
	i32.const 1
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 1) "int")
	(data $linear_memory(offset i32.const 0) "x")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $x i32)
	(local $x i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 20
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $x
	call $print_val
	call $print_space
	i32.const 4
	i32.const 1
	call $print_string
	call $print_equal
	local.get $x
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 5
	i32.const 6
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $x
	call $print_val
	call $print_space
	i32.const 11
	i32.const 1
	call $print_string
	call $print_equal
	local.get $x
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 12
	i32.const 6
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 12) "string")
	(data $linear_memory(offset i32.const 11) "x")
	(data $linear_memory(offset i32.const 5) "string")
	(data $linear_memory(offset i32.const 4) "x")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: duplicate local identifier
     --> <anon>:24:9
      |
   24 |     (local $x i32)
      |         ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 1
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 1) "int")
	(data $linear_memory(offset i32.const 0) "a")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 16
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 4
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 5
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 8
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 9
	i32.const 6
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_bool
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $c i32)
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 32
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 4
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 5
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 8
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 9
	i32.const 6
	call $print_string
	call $print_new_line
	i32.const 123
	i32.const 0
	call $pair_con_nogc_i32_nogc_i32
	local.set $c
	call $print_val
	call $print_space
	i32.const 15
	i32.const 1
	call $print_string
	call $print_equal
	local.get $c
	call $pair_print_<i*b>
	call $print_colon
	i32.const 16
	i32.const 12
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 16) "(int * bool)")
	(data $linear_memory(offset i32.const 15) "c")
	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_bool
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $d i32)
	(local $c i32)
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 36
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 4
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 5
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 8
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 9
	i32.const 6
	call $print_string
	call $print_new_line
	i32.const 123
	i32.const 0
	call $pair_con_nogc_i32_nogc_i32
	local.set $c
	call $print_val
	call $print_space
	i32.const 15
	i32.const 1
	call $print_string
	call $print_equal
	local.get $c
	call $pair_print_<i*b>
	call $print_colon
	i32.const 16
	i32.const 12
	call $print_string
	call $print_new_line
	local.get $c
	i32.load offset=4 align=4
	if (result i32)
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.mul

	else
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.div_s

	end
	local.set $d
	call $print_val
	call $print_space
	i32.const 28
	i32.const 1
	call $print_string
	call $print_equal
	local.get $d
	call $print_int
	call $print_colon
	i32.const 29
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 29) "int")
	(data $linear_memory(offset i32.const 28) "d")
	(data $linear_memory(offset i32.const 16) "(int * bool)")
	(data $linear_memory(offset i32.const 15) "c")
	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_bool
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $e i32)
	(local $d i32)
	(local $c i32)
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 60
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 15
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 16
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 19
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 20
	i32.const 6
	call $print_string
	call $print_new_line
	i32.const 123
	i32.const 0
	call $pair_con_nogc_i32_nogc_i32
	local.set $c
	call $print_val
	call $print_space
	i32.const 26
	i32.const 1
	call $print_string
	call $print_equal
	local.get $c
	call $pair_print_<i*b>
	call $print_colon
	i32.const 27
	i32.const 12
	call $print_string
	call $print_new_line
	local.get $c
	i32.load offset=4 align=4
	if (result i32)
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.mul

	else
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.div_s

	end
	local.set $d
	call $print_val
	call $print_space
	i32.const 39
	i32.const 1
	call $print_string
	call $print_equal
	local.get $d
	call $print_int
	call $print_colon
	i32.const 40
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $e
	call $print_val
	call $print_space
	i32.const 43
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 44
	i32.const 15
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $e
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 4
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 4
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 8
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 7
		i32.store offset=4 align=4
		local.get $str_ptr

	end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 8
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 1
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 1) "int")
	(data $linear_memory(offset i32.const 0) "a")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 16
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 4
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 5
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 8
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 9
	i32.const 6
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_bool
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $c i32)
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 32
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 4
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 5
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 8
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 9
	i32.const 6
	call $print_string
	call $print_new_line
	i32.const 123
	i32.const 0
	call $pair_con_nogc_i32_nogc_i32
	local.set $c
	call $print_val
	call $print_space
	i32.const 15
	i32.const 1
	call $print_string
	call $print_equal
	local.get $c
	call $pair_print_<i*b>
	call $print_colon
	i32.const 16
	i32.const 12
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 16) "(int * bool)")
	(data $linear_memory(offset i32.const 15) "c")
	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_bool
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $d i32)
	(local $c i32)
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 36
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 4
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 5
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 8
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 9
	i32.const 6
	call $print_string
	call $print_new_line
	i32.const 123
	i32.const 0
	call $pair_con_nogc_i32_nogc_i32
	local.set $c
	call $print_val
	call $print_space
	i32.const 15
	i32.const 1
	call $print_string
	call $print_equal
	local.get $c
	call $pair_print_<i*b>
	call $print_colon
	i32.const 16
	i32.const 12
	call $print_string
	call $print_new_line
	local.get $c
	i32.load offset=4 align=4
	if (result i32)
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.mul

	else
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.div_s

	end
	local.set $d
	call $print_val
	call $print_space
	i32.const 28
	i32.const 1
	call $print_string
	call $print_equal
	local.get $d
	call $print_int
	call $print_colon
	i32.const 29
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 29) "int")
	(data $linear_memory(offset i32.const 28) "d")
	(data $linear_memory(offset i32.const 16) "(int * bool)")
	(data $linear_memory(offset i32.const 15) "c")
	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_bool
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $e i32)
	(local $d i32)
	(local $c i32)
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 60
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 15
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 16
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 19
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 20
	i32.const 6
	call $print_string
	call $print_new_line
	i32.const 123
	i32.const 0
	call $pair_con_nogc_i32_nogc_i32
	local.set $c
	call $print_val
	call $print_space
	i32.const 26
	i32.const 1
	call $print_string
	call $print_equal
	local.get $c
	call $pair_print_<i*b>
	call $print_colon
	i32.const 27
	i32.const 12
	call $print_string
	call $print_new_line
	local.get $c
	i32.load offset=4 align=4
	if (result i32)
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.mul

	else
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.div_s

	end
	local.set $d
	call $print_val
	call $print_space
	i32.const 39
	i32.const 1
	call $print_string
	call $print_equal
	local.get $d
	call $print_int
	call $print_colon
	i32.const 40
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $e
	call $print_val
	call $print_space
	i32.const 43
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 44
	i32.const 15
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $e
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 4
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 4
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 8
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 7
		i32.store offset=4 align=4
		local.get $str_ptr

	end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_bool
	call $print_rparen
)
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $f i32)
	(local $e i32)
	(local $d i32)
	(local $c i32)
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 80
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 15
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 16
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 19
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 20
	i32.const 6
	call $print_string
	call $print_new_line
	i32.const 123
	i32.const 0
	call $pair_con_nogc_i32_nogc_i32
	local.set $c
	call $print_val
	call $print_space
	i32.const 26
	i32.const 1
	call $print_string
	call $print_equal
	local.get $c
	call $pair_print_<i*b>
	call $print_colon
	i32.const 27
	i32.const 12
	call $print_string
	call $print_new_line
	local.get $c
	i32.load offset=4 align=4
	if (result i32)
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.mul

	else
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.div_s

	end
	local.set $d
	call $print_val
	call $print_space
	i32.const 39
	i32.const 1
	call $print_string
	call $print_equal
	local.get $d
	call $print_int
	call $print_colon
	i32.const 40
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $e
	call $print_val
	call $print_space
	i32.const 43
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 44
	i32.const 15
	call $print_string
	call $print_new_line
	local.get $e
	local.tee $__fptr
	i32.const 0
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $e
	local.tee $__fptr
	i32.const 123
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	call $pair_con_nogc_i32_nogc_i32
	local.set $f
	call $print_val
	call $print_space
	i32.const 59
	i32.const 1
	call $print_string
	call $print_equal
	local.get $f
	call $pair_print_<s*s>
	call $print_colon
	i32.const 60
	i32.const 17
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $e
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 4
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 4
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 8
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 7
		i32.store offset=4 align=4
		local.get $str_ptr

	end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 60) "(string * string)")
	(data $linear_memory(offset i32.const 59) "f")
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $g i32)(param $h i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	call $print_int
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	call $print_bool
	call $print_rparen
)
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
	(local $str_ptr i32)
	call $print_lparen
	local.get 0
	i32.load offset=0 align=4
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_comma
	local.get 0
	i32.load offset=4 align=4
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_rparen
)
	(func $__cml_main (type $entry_point) 
	(local $g i32)
	(local $f i32)
	(local $e i32)
	(local $d i32)
	(local $c i32)
	(local $b i32)
	(local $a i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 112
	global.set $alloc_ptr
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.mul
	local.set $a
	call $print_val
	call $print_space
	i32.const 15
	i32.const 1
	call $print_string
	call $print_equal
	local.get $a
	call $print_int
	call $print_colon
	i32.const 16
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 3
	i32.const 2
	i32.const 1
	i32.add
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 2
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 2
		i32.store offset=4 align=4
		local.get $str_ptr

	end
	local.set $b
	call $print_val
	call $print_space
	i32.const 19
	i32.const 1
	call $print_string
	call $print_equal
	local.get $b
	local.tee $str_ptr
	i32.load offset=0 align=4
	local.get $str_ptr
	i32.load offset=4 align=4
	call $print_double_quote
	call $print_string
	call $print_double_quote
	call $print_colon
	i32.const 20
	i32.const 6
	call $print_string
	call $print_new_line
	i32.const 123
	i32.const 0
	call $pair_con_nogc_i32_nogc_i32
	local.set $c
	call $print_val
	call $print_space
	i32.const 26
	i32.const 1
	call $print_string
	call $print_equal
	local.get $c
	call $pair_print_<i*b>
	call $print_colon
	i32.const 27
	i32.const 12
	call $print_string
	call $print_new_line
	local.get $c
	i32.load offset=4 align=4
	if (result i32)
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.mul

	else
		local.get $c
		i32.load offset=0 align=4
		i32.const 2
		i32.div_s

	end
	local.set $d
	call $print_val
	call $print_space
	i32.const 39
	i32.const 1
	call $print_string
	call $print_equal
	local.get $d
	call $print_int
	call $print_colon
	i32.const 40
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $e
	call $print_val
	call $print_space
	i32.const 43
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 44
	i32.const 15
	call $print_string
	call $print_new_line
	local.get $e
	local.tee $__fptr
	i32.const 0
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $e
	local.tee $__fptr
	i32.const 123
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	call $pair_con_nogc_i32_nogc_i32
	local.set $f
	call $print_val
	call $print_space
	i32.const 59
	i32.const 1
	call $print_string
	call $print_equal
	local.get $f
	call $pair_print_<s*s>
	call $print_colon
	i32.const 60
	i32.const 17
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $g
	call $print_val
	call $print_space
	i32.const 77
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 78
	i32.const 30
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
	(local $pair_addr i32)
	i32.const 8
	call $alloc
	local.tee $pair_addr
	local.get 0
	i32.store offset=0 align=4
	local.get $pair_addr
	local.get 1
	i32.store offset=4 align=4
	local.get $pair_addr
)
	(func $function1 (type $function)(param $g i32)(param $h i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $g
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $h
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $h i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $h
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $h
	local.tee $__fptr
	local.get $x
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $h
	local.tee $__fptr
	i32.const 123
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	i32.add
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $e
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 4
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 4
		i32.store offset=4 align=4
		local.get $str_ptr

	else
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 8
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 7
		i32.store offset=4 align=4
		local.get $str_ptr

	end
)
	(table $function 3 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 78) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 77) "g")
	(data $linear_memory(offset i32.const 60) "(string * string)")
	(data $linear_memory(offset i32.const 59) "f")
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
RuntimeError: undefined element: out of bounds table access
    at function2 (<module>[19]:0x3a1)
    at __cml_main (<module>[15]:0x2e3)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $g i32)(param $h i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $g i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 32
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $g
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 30
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $function0 (type $function)(param $g i32)(param $h i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $g
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $h
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $function1 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $h i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $h
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $h
	local.tee $__fptr
	local.get $x
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $h
	local.tee $__fptr
	i32.const 123
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	i32.add
)
	(table $function 2 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 1) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "g")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $z i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $i i32)
	(local $g i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 36
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $g
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 30
	call $print_string
	call $print_new_line
	local.get $g
	local.tee $__fptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.tee $__fptr
	i32.const 456
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.set $i
	call $print_val
	call $print_space
	i32.const 31
	i32.const 1
	call $print_string
	call $print_equal
	local.get $i
	call $print_int
	call $print_colon
	i32.const 32
	i32.const 3
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $z i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $z
	i32.const 2
	i32.mul
)
	(func $function0 (type $function)(param $g i32)(param $h i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $g
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $h
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $function1 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $h i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $h
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $h
	local.tee $__fptr
	local.get $x
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $h
	local.tee $__fptr
	i32.const 123
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	i32.add
)
	(table $function 3 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 32) "int")
	(data $linear_memory(offset i32.const 31) "i")
	(data $linear_memory(offset i32.const 1) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "g")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $j i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
	(local $j i32)
	(local $i i32)
	(local $g i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	i32.const 52
	global.set $alloc_ptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $g
	call $print_val
	call $print_space
	i32.const 0
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 1
	i32.const 30
	call $print_string
	call $print_new_line
	local.get $g
	local.tee $__fptr
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.tee $__fptr
	i32.const 456
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.set $i
	call $print_val
	call $print_space
	i32.const 31
	i32.const 1
	call $print_string
	call $print_equal
	local.get $i
	call $print_int
	call $print_colon
	i32.const 32
	i32.const 3
	call $print_string
	call $print_new_line
	i32.const 4
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.set $j
	call $print_val
	call $print_space
	i32.const 35
	i32.const 1
	call $print_string
	call $print_colon
	i32.const 36
	i32.const 12
	call $print_string
	call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
	(local $old i32)
	global.get $alloc_ptr
	local.set $old
	local.get $old
	local.get $size
	i32.add
	global.set $alloc_ptr
	local.get $old
)
	(func $function3 (type $function)(param $j i32)(param $x i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $j
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $x
	i32.const 0
	i32.eq
	if (result i32)
		i32.const 1
	else
		local.get $j
		local.tee $__fptr
		local.get $x
		i32.const 1
		i32.sub
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $x
		i32.mul

	end
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $z i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $z
	i32.const 2
	i32.mul
)
	(func $function0 (type $function)(param $g i32)(param $h i32) (result i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $g
	i32.load offset=0 align=4
	local.set $__fptr
	i32.const 8
	call $alloc
	local.tee $closure_ptr
	local.get $__fptr
	i32.store offset=0 align=4
	local.get $closure_ptr
	local.get $h
	i32.store offset=4 align=4
	local.get $closure_ptr
)
	(func $function1 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
	(local $h i32)
	(local $str_ptr i32)
	(local $closure_ptr i32)
	(local $__fptr i32)
	local.get $non_recursive_closure
	i32.load offset=4 align=4
	local.set $h
	local.get $non_recursive_closure
	i32.load offset=0 align=4
	local.set $__fptr
	local.get $h
	local.tee $__fptr
	local.get $x
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	local.get $h
	local.tee $__fptr
	i32.const 123
	local.get $__fptr
	i32.load offset=0 align=4
	call_indirect $function (type $function)
	i32.add
)
	(table $function 4 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function3)
(item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 36) "(int -> int)")
	(data $linear_memory(offset i32.const 35) "j")
	(data $linear_memory(offset i32.const 32) "int")
	(data $linear_memory(offset i32.const 31) "i")
	(data $linear_memory(offset i32.const 1) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "g")
)
generated imports
RuntimeError: undefined element: out of bounds table access
    at __cml_main (<module>[13]:0x1c5)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
			(func $__cml_main (type $entry_point) 
			(local $a i32)
			(local $str_ptr i32)
			(local $closure_ptr i32)
			(local $__fptr i32)
			i32.const 8
			global.set $alloc_ptr
			i32.const 3
			i32.const 2
			i32.const 1
			i32.add
			i32.mul
			local.set $a
			call $print_val
			call $print_space
			i32.const 0
			i32.const 1
			call $print_string
			call $print_equal
			local.get $a
			call $print_int
			call $print_colon
			i32.const 1
			i32.const 3
			call $print_string
			call $print_new_line
)
		(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
			(global $alloc_ptr (mut i32) i32.const 0)
			(export "__cml_main" (func $__cml_main))
			(start $__cml_main)			(data $linear_memory(offset i32.const 1) "int")
			(data $linear_memory(offset i32.const 0) "a")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
			(func $__cml_main (type $entry_point) 
			(local $b i32)
			(local $a i32)
			(local $str_ptr i32)
			(local $closure_ptr i32)
			(local $__fptr i32)
			i32.const 16
			global.set $alloc_ptr
			i32.const 3
			i32.const 2
			i32.const 1
			i32.add
			i32.mul
			local.set $a
			call $print_val
			call $print_space
			i32.const 4
			i32.const 1
			call $print_string
			call $print_equal
			local.get $a
			call $print_int
			call $print_colon
			i32.const 5
			i32.const 3
			call $print_string
			call $print_new_line
			i32.const 3
			i32.const 2
			i32.const 1
			i32.add
			i32.eq
			if (result i32)
				i32.const 8
				call $alloc
				local.tee $str_ptr
				i32.const 0
				i32.store offset=0 align=4
				local.get $str_ptr
				i32.const 2
				i32.store offset=4 align=4
				local.get $str_ptr

			else
				i32.const 8
				call $alloc
				local.tee $str_ptr
				i32.const 2
				i32.store offset=0 align=4
				local.get $str_ptr
				i32.const 2
				i32.store offset=4 align=4
				local.get $str_ptr

			end
			local.set $b
			call $print_val
			call $print_space
			i32.const 8
			i32.const 1
			call $print_string
			call $print_equal
			local.get $b
			local.tee $str_ptr
			i32.load offset=0 align=4
			local.get $str_ptr
			i32.load offset=4 align=4
			call $print_double_quote
			call $print_string
			call $print_double_quote
			call $print_colon
			i32.const 9
			i32.const 6
			call $print_string
			call $print_new_line
)
		(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
			(global $alloc_ptr (mut i32) i32.const 0)
			(export "__cml_main" (func $__cml_main))
			(start $__cml_main)			(data $linear_memory(offset i32.const 9) "string")
			(data $linear_memory(offset i32.const 8) "b")
			(data $linear_memory(offset i32.const 5) "int")
			(data $linear_memory(offset i32.const 4) "a")
			(data $linear_memory(offset i32.const 2) "NG")
			(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
					(func $pair_print_<i*b> (type $pair_print_<i*b>)
					(local $str_ptr i32)
					call $print_lparen
					local.get 0
					i32.load offset=0 align=4
					call $print_int
					call $print_comma
					local.get 0
					i32.load offset=4 align=4
					call $print_bool
					call $print_rparen
)
				(func $__cml_main (type $entry_point) 
				(local $c i32)
				(local $b i32)
				(local $a i32)
				(local $str_ptr i32)
				(local $closure_ptr i32)
				(local $__fptr i32)
				i32.const 32
				global.set $alloc_ptr
				i32.const 3
				i32.const 2
				i32.const 1
				i32.add
				i32.mul
				local.set $a
				call $print_val
				call $print_space
				i32.const 4
				i32.const 1
				call $print_string
				call $print_equal
				local.get $a
				call $print_int
				call $print_colon
				i32.const 5
				i32.const 3
				call $print_string
				call $print_new_line
				i32.const 3
				i32.const 2
				i32.const 1
				i32.add
				i32.eq
				if (result i32)
					i32.const 8
					call $alloc
					local.tee $str_ptr
					i32.const 0
					i32.store offset=0 align=4
					local.get $str_ptr
					i32.const 2
					i32.store offset=4 align=4
					local.get $str_ptr

				else
					i32.const 8
					call $alloc
					local.tee $str_ptr
					i32.const 2
					i32.store offset=0 align=4
					local.get $str_ptr
					i32.const 2
					i32.store offset=4 align=4
					local.get $str_ptr

				end
				local.set $b
				call $print_val
				call $print_space
				i32.const 8
				i32.const 1
				call $print_string
				call $print_equal
				local.get $b
				local.tee $str_ptr
				i32.load offset=0 align=4
				local.get $str_ptr
				i32.load offset=4 align=4
				call $print_double_quote
				call $print_string
				call $print_double_quote
				call $print_colon
				i32.const 9
				i32.const 6
				call $print_string
				call $print_new_line
				i32.const 123
				i32.const 0
				call $pair_con_nogc_i32_nogc_i32
				local.set $c
				call $print_val
				call $print_space
				i32.const 15
				i32.const 1
				call $print_string
				call $print_equal
				local.get $c
				call $pair_print_<i*b>
				call $print_colon
				i32.const 16
				i32.const 12
				call $print_string
				call $print_new_line
)
			(func $alloc (type $alloc_sig)(param $size i32) (result i32)
			(local $old i32)
			global.get $alloc_ptr
			local.set $old
			local.get $old
			local.get $size
			i32.add
			global.set $alloc_ptr
			local.get $old
)
		(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
					(global $alloc_ptr (mut i32) i32.const 0)
					(export "__cml_main" (func $__cml_main))
					(start $__cml_main)					(data $linear_memory(offset i32.const 16) "(int * bool)")
					(data $linear_memory(offset i32.const 15) "c")
					(data $linear_memory(offset i32.const 9) "string")
					(data $linear_memory(offset i32.const 8) "b")
					(data $linear_memory(offset i32.const 5) "int")
					(data $linear_memory(offset i32.const 4) "a")
					(data $linear_memory(offset i32.const 2) "NG")
					(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
					(func $pair_print_<i*b> (type $pair_print_<i*b>)
					(local $str_ptr i32)
					call $print_lparen
					local.get 0
					i32.load offset=0 align=4
					call $print_int
					call $print_comma
					local.get 0
					i32.load offset=4 align=4
					call $print_bool
					call $print_rparen
)
				(func $__cml_main (type $entry_point) 
				(local $d i32)
				(local $c i32)
				(local $b i32)
				(local $a i32)
				(local $str_ptr i32)
				(local $closure_ptr i32)
				(local $__fptr i32)
				i32.const 36
				global.set $alloc_ptr
				i32.const 3
				i32.const 2
				i32.const 1
				i32.add
				i32.mul
				local.set $a
				call $print_val
				call $print_space
				i32.const 4
				i32.const 1
				call $print_string
				call $print_equal
				local.get $a
				call $print_int
				call $print_colon
				i32.const 5
				i32.const 3
				call $print_string
				call $print_new_line
				i32.const 3
				i32.const 2
				i32.const 1
				i32.add
				i32.eq
				if (result i32)
					i32.const 8
					call $alloc
					local.tee $str_ptr
					i32.const 0
					i32.store offset=0 align=4
					local.get $str_ptr
					i32.const 2
					i32.store offset=4 align=4
					local.get $str_ptr

				else
					i32.const 8
					call $alloc
					local.tee $str_ptr
					i32.const 2
					i32.store offset=0 align=4
					local.get $str_ptr
					i32.const 2
					i32.store offset=4 align=4
					local.get $str_ptr

				end
				local.set $b
				call $print_val
				call $print_space
				i32.const 8
				i32.const 1
				call $print_string
				call $print_equal
				local.get $b
				local.tee $str_ptr
				i32.load offset=0 align=4
				local.get $str_ptr
				i32.load offset=4 align=4
				call $print_double_quote
				call $print_string
				call $print_double_quote
				call $print_colon
				i32.const 9
				i32.const 6
				call $print_string
				call $print_new_line
				i32.const 123
				i32.const 0
				call $pair_con_nogc_i32_nogc_i32
				local.set $c
				call $print_val
				call $print_space
				i32.const 15
				i32.const 1
				call $print_string
				call $print_equal
				local.get $c
				call $pair_print_<i*b>
				call $print_colon
				i32.const 16
				i32.const 12
				call $print_string
				call $print_new_line
				local.get $c
				i32.load offset=4 align=4
				if (result i32)
					local.get $c
					i32.load offset=0 align=4
					i32.const 2
					i32.mul

				else
					local.get $c
					i32.load offset=0 align=4
					i32.const 2
					i32.div_s

				end
				local.set $d
				call $print_val
				call $print_space
				i32.const 28
				i32.const 1
				call $print_string
				call $print_equal
				local.get $d
				call $print_int
				call $print_colon
				i32.const 29
				i32.const 3
				call $print_string
				call $print_new_line
)
			(func $alloc (type $alloc_sig)(param $size i32) (result i32)
			(local $old i32)
			global.get $alloc_ptr
			local.set $old
			local.get $old
			local.get $size
			i32.add
			global.set $alloc_ptr
			local.get $old
)
		(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
					(global $alloc_ptr (mut i32) i32.const 0)
					(export "__cml_main" (func $__cml_main))
					(start $__cml_main)					(data $linear_memory(offset i32.const 29) "int")
					(data $linear_memory(offset i32.const 28) "d")
					(data $linear_memory(offset i32.const 16) "(int * bool)")
					(data $linear_memory(offset i32.const 15) "c")
					(data $linear_memory(offset i32.const 9) "string")
					(data $linear_memory(offset i32.const 8) "b")
					(data $linear_memory(offset i32.const 5) "int")
					(data $linear_memory(offset i32.const 4) "a")
					(data $linear_memory(offset i32.const 2) "NG")
					(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
						(func $pair_print_<i*b> (type $pair_print_<i*b>)
						(local $str_ptr i32)
						call $print_lparen
						local.get 0
						i32.load offset=0 align=4
						call $print_int
						call $print_comma
						local.get 0
						i32.load offset=4 align=4
						call $print_bool
						call $print_rparen
)
					(func $__cml_main (type $entry_point) 
					(local $e i32)
					(local $d i32)
					(local $c i32)
					(local $b i32)
					(local $a i32)
					(local $str_ptr i32)
					(local $closure_ptr i32)
					(local $__fptr i32)
					i32.const 60
					global.set $alloc_ptr
					i32.const 3
					i32.const 2
					i32.const 1
					i32.add
					i32.mul
					local.set $a
					call $print_val
					call $print_space
					i32.const 15
					i32.const 1
					call $print_string
					call $print_equal
					local.get $a
					call $print_int
					call $print_colon
					i32.const 16
					i32.const 3
					call $print_string
					call $print_new_line
					i32.const 3
					i32.const 2
					i32.const 1
					i32.add
					i32.eq
					if (result i32)
						i32.const 8
						call $alloc
						local.tee $str_ptr
						i32.const 0
						i32.store offset=0 align=4
						local.get $str_ptr
						i32.const 2
						i32.store offset=4 align=4
						local.get $str_ptr

					else
						i32.const 8
						call $alloc
						local.tee $str_ptr
						i32.const 2
						i32.store offset=0 align=4
						local.get $str_ptr
						i32.const 2
						i32.store offset=4 align=4
						local.get $str_ptr

					end
					local.set $b
					call $print_val
					call $print_space
					i32.const 19
					i32.const 1
					call $print_string
					call $print_equal
					local.get $b
					local.tee $str_ptr
					i32.load offset=0 align=4
					local.get $str_ptr
					i32.load offset=4 align=4
					call $print_double_quote
					call $print_string
					call $print_double_quote
					call $print_colon
					i32.const 20
					i32.const 6
					call $print_string
					call $print_new_line
					i32.const 123
					i32.const 0
					call $pair_con_nogc_i32_nogc_i32
					local.set $c
					call $print_val
					call $print_space
					i32.const 26
					i32.const 1
					call $print_string
					call $print_equal
					local.get $c
					call $pair_print_<i*b>
					call $print_colon
					i32.const 27
					i32.const 12
					call $print_string
					call $print_new_line
					local.get $c
					i32.load offset=4 align=4
					if (result i32)
						local.get $c
						i32.load offset=0 align=4
						i32.const 2
						i32.mul

					else
						local.get $c
						i32.load offset=0 align=4
						i32.const 2
						i32.div_s

					end
					local.set $d
					call $print_val
					call $print_space
					i32.const 39
					i32.const 1
					call $print_string
					call $print_equal
					local.get $d
					call $print_int
					call $print_colon
					i32.const 40
					i32.const 3
					call $print_string
					call $print_new_line
					i32.const 4
					call $alloc
					local.tee $closure_ptr
					local.get $__fptr
					i32.store offset=0 align=4
					local.get $closure_ptr
					local.set $e
					call $print_val
					call $print_space
					i32.const 43
					i32.const 1
					call $print_string
					call $print_colon
					i32.const 44
					i32.const 15
					call $print_string
					call $print_new_line
)
				(func $alloc (type $alloc_sig)(param $size i32) (result i32)
				(local $old i32)
				global.get $alloc_ptr
				local.set $old
				local.get $old
				local.get $size
				i32.add
				global.set $alloc_ptr
				local.get $old
)
			(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
			(local $pair_addr i32)
			i32.const 8
			call $alloc
			local.tee $pair_addr
			local.get 0
			i32.store offset=0 align=4
			local.get $pair_addr
			local.get 1
			i32.store offset=4 align=4
			local.get $pair_addr
)
		(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
						(table $function 1 funcref)
						(global $alloc_ptr (mut i32) i32.const 0)
						(export "__cml_main" (func $__cml_main))
						(start $__cml_main)						(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
						(data $linear_memory(offset i32.const 44) "(int -> string)")
						(data $linear_memory(offset i32.const 43) "e")
						(data $linear_memory(offset i32.const 40) "int")
						(data $linear_memory(offset i32.const 39) "d")
						(data $linear_memory(offset i32.const 27) "(int * bool)")
						(data $linear_memory(offset i32.const 26) "c")
						(data $linear_memory(offset i32.const 20) "string")
						(data $linear_memory(offset i32.const 19) "b")
						(data $linear_memory(offset i32.const 16) "int")
						(data $linear_memory(offset i32.const 15) "a")
						(data $linear_memory(offset i32.const 8) "nonzero")
						(data $linear_memory(offset i32.const 4) "zero")
						(data $linear_memory(offset i32.const 2) "NG")
						(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
							(func $pair_print_<i*b> (type $pair_print_<i*b>)
							(local $str_ptr i32)
							call $print_lparen
							local.get 0
							i32.load offset=0 align=4
							call $print_int
							call $print_comma
							local.get 0
							i32.load offset=4 align=4
							call $print_bool
							call $print_rparen
)
						(func $pair_print_<s*s> (type $pair_print_<s*s>)
						(local $str_ptr i32)
						call $print_lparen
						local.get 0
						i32.load offset=0 align=4
						local.tee $str_ptr
						i32.load offset=0 align=4
						local.get $str_ptr
						i32.load offset=4 align=4
						call $print_double_quote
						call $print_string
						call $print_double_quote
						call $print_comma
						local.get 0
						i32.load offset=4 align=4
						local.tee $str_ptr
						i32.load offset=0 align=4
						local.get $str_ptr
						i32.load offset=4 align=4
						call $print_double_quote
						call $print_string
						call $print_double_quote
						call $print_rparen
)
					(func $__cml_main (type $entry_point) 
					(local $f i32)
					(local $e i32)
					(local $d i32)
					(local $c i32)
					(local $b i32)
					(local $a i32)
					(local $str_ptr i32)
					(local $closure_ptr i32)
					(local $__fptr i32)
					i32.const 80
					global.set $alloc_ptr
					i32.const 3
					i32.const 2
					i32.const 1
					i32.add
					i32.mul
					local.set $a
					call $print_val
					call $print_space
					i32.const 15
					i32.const 1
					call $print_string
					call $print_equal
					local.get $a
					call $print_int
					call $print_colon
					i32.const 16
					i32.const 3
					call $print_string
					call $print_new_line
					i32.const 3
					i32.const 2
					i32.const 1
					i32.add
					i32.eq
					if (result i32)
						i32.const 8
						call $alloc
						local.tee $str_ptr
						i32.const 0
						i32.store offset=0 align=4
						local.get $str_ptr
						i32.const 2
						i32.store offset=4 align=4
						local.get $str_ptr

					else
						i32.const 8
						call $alloc
						local.tee $str_ptr
						i32.const 2
						i32.store offset=0 align=4
						local.get $str_ptr
						i32.const 2
						i32.store offset=4 align=4
						local.get $str_ptr

					end
					local.set $b
					call $print_val
					call $print_space
					i32.const 19
					i32.const 1
					call $print_string
					call $print_equal
					local.get $b
					local.tee $str_ptr
					i32.load offset=0 align=4
					local.get $str_ptr
					i32.load offset=4 align=4
					call $print_double_quote
					call $print_string
					call $print_double_quote
					call $print_colon
					i32.const 20
					i32.const 6
					call $print_string
					call $print_new_line
					i32.const 123
					i32.const 0
					call $pair_con_nogc_i32_nogc_i32
					local.set $c
					call $print_val
					call $print_space
					i32.const 26
					i32.const 1
					call $print_string
					call $print_equal
					local.get $c
					call $pair_print_<i*b>
					call $print_colon
					i32.const 27
					i32.const 12
					call $print_string
					call $print_new_line
					local.get $c
					i32.load offset=4 align=4
					if (result i32)
						local.get $c
						i32.load offset=0 align=4
						i32.const 2
						i32.mul

					else
						local.get $c
						i32.load offset=0 align=4
						i32.const 2
						i32.div_s

					end
					local.set $d
					call $print_val
					call $print_space
					i32.const 39
					i32.const 1
					call $print_string
					call $print_equal
					local.get $d
					call $print_int
					call $print_colon
					i32.const 40
					i32.const 3
					call $print_string
					call $print_new_line
					i32.const 4
					call $alloc
					local.tee $closure_ptr
					local.get $__fptr
					i32.store offset=0 align=4
					local.get $closure_ptr
					local.set $e
					call $print_val
					call $print_space
					i32.const 43
					i32.const 1
					call $print_string
					call $print_colon
					i32.const 44
					i32.const 15
					call $print_string
					call $print_new_line
					local.get $e
					local.tee $__fptr
					i32.const 0
					local.get $__fptr
					i32.load offset=0 align=4
					call_indirect $function (type $function)
					local.get $e
					local.tee $__fptr
					i32.const 123
					local.get $__fptr
					i32.load offset=0 align=4
					call_indirect $function (type $function)
					call $pair_con_nogc_i32_nogc_i32
					local.set $f
					call $print_val
					call $print_space
					i32.const 59
					i32.const 1
					call $print_string
					call $print_equal
					local.get $f
					call $pair_print_<s*s>
					call $print_colon
					i32.const 60
					i32.const 17
					call $print_string
					call $print_new_line
)
				(func $alloc (type $alloc_sig)(param $size i32) (result i32)
				(local $old i32)
				global.get $alloc_ptr
				local.set $old
				local.get $old
				local.get $size
				i32.add
				global.set $alloc_ptr
				local.get $old
)
			(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
			(local $pair_addr i32)
			i32.const 8
			call $alloc
			local.tee $pair_addr
			local.get 0
			i32.store offset=0 align=4
			local.get $pair_addr
			local.get 1
			i32.store offset=4 align=4
			local.get $pair_addr
)
		(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
							(table $function 1 funcref)
							(global $alloc_ptr (mut i32) i32.const 0)
							(export "__cml_main" (func $__cml_main))
							(start $__cml_main)							(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
							(data $linear_memory(offset i32.const 60) "(string * string)")
							(data $linear_memory(offset i32.const 59) "f")
							(data $linear_memory(offset i32.const 44) "(int -> string)")
							(data $linear_memory(offset i32.const 43) "e")
							(data $linear_memory(offset i32.const 40) "int")
							(data $linear_memory(offset i32.const 39) "d")
							(data $linear_memory(offset i32.const 27) "(int * bool)")
							(data $linear_memory(offset i32.const 26) "c")
							(data $linear_memory(offset i32.const 20) "string")
							(data $linear_memory(offset i32.const 19) "b")
							(data $linear_memory(offset i32.const 16) "int")
							(data $linear_memory(offset i32.const 15) "a")
							(data $linear_memory(offset i32.const 8) "nonzero")
							(data $linear_memory(offset i32.const 4) "zero")
							(data $linear_memory(offset i32.const 2) "NG")
							(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $g i32)(param $h i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
									(func $pair_print_<i*b> (type $pair_print_<i*b>)
									(local $str_ptr i32)
									call $print_lparen
									local.get 0
									i32.load offset=0 align=4
									call $print_int
									call $print_comma
									local.get 0
									i32.load offset=4 align=4
									call $print_bool
									call $print_rparen
)
								(func $pair_print_<s*s> (type $pair_print_<s*s>)
								(local $str_ptr i32)
								call $print_lparen
								local.get 0
								i32.load offset=0 align=4
								local.tee $str_ptr
								i32.load offset=0 align=4
								local.get $str_ptr
								i32.load offset=4 align=4
								call $print_double_quote
								call $print_string
								call $print_double_quote
								call $print_comma
								local.get 0
								i32.load offset=4 align=4
								local.tee $str_ptr
								i32.load offset=0 align=4
								local.get $str_ptr
								i32.load offset=4 align=4
								call $print_double_quote
								call $print_string
								call $print_double_quote
								call $print_rparen
)
							(func $__cml_main (type $entry_point) 
							(local $g i32)
							(local $f i32)
							(local $e i32)
							(local $d i32)
							(local $c i32)
							(local $b i32)
							(local $a i32)
							(local $str_ptr i32)
							(local $closure_ptr i32)
							(local $__fptr i32)
							i32.const 112
							global.set $alloc_ptr
							i32.const 3
							i32.const 2
							i32.const 1
							i32.add
							i32.mul
							local.set $a
							call $print_val
							call $print_space
							i32.const 15
							i32.const 1
							call $print_string
							call $print_equal
							local.get $a
							call $print_int
							call $print_colon
							i32.const 16
							i32.const 3
							call $print_string
							call $print_new_line
							i32.const 3
							i32.const 2
							i32.const 1
							i32.add
							i32.eq
							if (result i32)
								i32.const 8
								call $alloc
								local.tee $str_ptr
								i32.const 0
								i32.store offset=0 align=4
								local.get $str_ptr
								i32.const 2
								i32.store offset=4 align=4
								local.get $str_ptr

							else
								i32.const 8
								call $alloc
								local.tee $str_ptr
								i32.const 2
								i32.store offset=0 align=4
								local.get $str_ptr
								i32.const 2
								i32.store offset=4 align=4
								local.get $str_ptr

							end
							local.set $b
							call $print_val
							call $print_space
							i32.const 19
							i32.const 1
							call $print_string
							call $print_equal
							local.get $b
							local.tee $str_ptr
							i32.load offset=0 align=4
							local.get $str_ptr
							i32.load offset=4 align=4
							call $print_double_quote
							call $print_string
							call $print_double_quote
							call $print_colon
							i32.const 20
							i32.const 6
							call $print_string
							call $print_new_line
							i32.const 123
							i32.const 0
							call $pair_con_nogc_i32_nogc_i32
							local.set $c
							call $print_val
							call $print_space
							i32.const 26
							i32.const 1
							call $print_string
							call $print_equal
							local.get $c
							call $pair_print_<i*b>
							call $print_colon
							i32.const 27
							i32.const 12
							call $print_string
							call $print_new_line
							local.get $c
							i32.load offset=4 align=4
							if (result i32)
								local.get $c
								i32.load offset=0 align=4
								i32.const 2
								i32.mul

							else
								local.get $c
								i32.load offset=0 align=4
								i32.const 2
								i32.div_s

							end
							local.set $d
							call $print_val
							call $print_space
							i32.const 39
							i32.const 1
							call $print_string
							call $print_equal
							local.get $d
							call $print_int
							call $print_colon
							i32.const 40
							i32.const 3
							call $print_string
							call $print_new_line
							i32.const 4
							call $alloc
							local.tee $closure_ptr
							local.get $__fptr
							i32.store offset=0 align=4
							local.get $closure_ptr
							local.set $e
							call $print_val
							call $print_space
							i32.const 43
							i32.const 1
							call $print_string
							call $print_colon
							i32.const 44
							i32.const 15
							call $print_string
							call $print_new_line
							local.get $e
							local.tee $__fptr
							i32.const 0
							local.get $__fptr
							i32.load offset=0 align=4
							call_indirect $function (type $function)
							local.get $e
							local.tee $__fptr
							i32.const 123
							local.get $__fptr
							i32.load offset=0 align=4
							call_indirect $function (type $function)
							call $pair_con_nogc_i32_nogc_i32
							local.set $f
							call $print_val
							call $print_space
							i32.const 59
							i32.const 1
							call $print_string
							call $print_equal
							local.get $f
							call $pair_print_<s*s>
							call $print_colon
							i32.const 60
							i32.const 17
							call $print_string
							call $print_new_line
							i32.const 4
							call $alloc
							local.tee $closure_ptr
							local.get $__fptr
							i32.store offset=0 align=4
							local.get $closure_ptr
							local.set $g
							call $print_val
							call $print_space
							i32.const 77
							i32.const 1
							call $print_string
							call $print_colon
							i32.const 78
							i32.const 30
							call $print_string
							call $print_new_line
)
						(func $alloc (type $alloc_sig)(param $size i32) (result i32)
						(local $old i32)
						global.get $alloc_ptr
						local.set $old
						local.get $old
						local.get $size
						i32.add
						global.set $alloc_ptr
						local.get $old
)
					(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
					(local $pair_addr i32)
					i32.const 8
					call $alloc
					local.tee $pair_addr
					local.get 0
					i32.store offset=0 align=4
					local.get $pair_addr
					local.get 1
					i32.store offset=4 align=4
					local.get $pair_addr
)
				(func $function1 (type $function)(param $g i32)(param $h i32) (result i32)
				(local $str_ptr i32)
				(local $closure_ptr i32)
				(local $__fptr i32)
				local.get $g
				i32.load offset=0 align=4
				local.set $__fptr
				i32.const 8
				call $alloc
				local.tee $closure_ptr
				local.get $__fptr
				i32.store offset=0 align=4
				local.get $closure_ptr
				local.get $h
				i32.store offset=4 align=4
				local.get $closure_ptr
)
			(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
			(local $h i32)
			(local $str_ptr i32)
			(local $closure_ptr i32)
			(local $__fptr i32)
			local.get $non_recursive_closure
			i32.load offset=4 align=4
			local.set $h
			local.get $non_recursive_closure
			i32.load offset=0 align=4
			local.set $__fptr
			local.get $h
			local.tee $__fptr
			local.get $x
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			local.get $h
			local.tee $__fptr
			i32.const 123
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			i32.add
)
		(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
									(table $function 3 funcref)
									(global $alloc_ptr (mut i32) i32.const 0)
									(export "__cml_main" (func $__cml_main))
									(start $__cml_main)									(elem (table $function)(offset i32.const 0)funcref (item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
									(data $linear_memory(offset i32.const 78) "((int -> int) -> (int -> int))")
									(data $linear_memory(offset i32.const 77) "g")
									(data $linear_memory(offset i32.const 60) "(string * string)")
									(data $linear_memory(offset i32.const 59) "f")
									(data $linear_memory(offset i32.const 44) "(int -> string)")
									(data $linear_memory(offset i32.const 43) "e")
									(data $linear_memory(offset i32.const 40) "int")
									(data $linear_memory(offset i32.const 39) "d")
									(data $linear_memory(offset i32.const 27) "(int * bool)")
									(data $linear_memory(offset i32.const 26) "c")
									(data $linear_memory(offset i32.const 20) "string")
									(data $linear_memory(offset i32.const 19) "b")
									(data $linear_memory(offset i32.const 16) "int")
									(data $linear_memory(offset i32.const 15) "a")
									(data $linear_memory(offset i32.const 8) "nonzero")
									(data $linear_memory(offset i32.const 4) "zero")
									(data $linear_memory(offset i32.const 2) "NG")
									(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
RuntimeError: undefined element: out of bounds table access
    at function2 (<module>[19]:0x3a1)
    at __cml_main (<module>[15]:0x2e3)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $z i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
										(func $pair_print_<i*b> (type $pair_print_<i*b>)
										(local $str_ptr i32)
										call $print_lparen
										local.get 0
										i32.load offset=0 align=4
										call $print_int
										call $print_comma
										local.get 0
										i32.load offset=4 align=4
										call $print_bool
										call $print_rparen
)
									(func $pair_print_<s*s> (type $pair_print_<s*s>)
									(local $str_ptr i32)
									call $print_lparen
									local.get 0
									i32.load offset=0 align=4
									local.tee $str_ptr
									i32.load offset=0 align=4
									local.get $str_ptr
									i32.load offset=4 align=4
									call $print_double_quote
									call $print_string
									call $print_double_quote
									call $print_comma
									local.get 0
									i32.load offset=4 align=4
									local.tee $str_ptr
									i32.load offset=0 align=4
									local.get $str_ptr
									i32.load offset=4 align=4
									call $print_double_quote
									call $print_string
									call $print_double_quote
									call $print_rparen
)
								(func $__cml_main (type $entry_point) 
								(local $i i32)
								(local $g i32)
								(local $f i32)
								(local $e i32)
								(local $d i32)
								(local $c i32)
								(local $b i32)
								(local $a i32)
								(local $str_ptr i32)
								(local $closure_ptr i32)
								(local $__fptr i32)
								i32.const 116
								global.set $alloc_ptr
								i32.const 3
								i32.const 2
								i32.const 1
								i32.add
								i32.mul
								local.set $a
								call $print_val
								call $print_space
								i32.const 15
								i32.const 1
								call $print_string
								call $print_equal
								local.get $a
								call $print_int
								call $print_colon
								i32.const 16
								i32.const 3
								call $print_string
								call $print_new_line
								i32.const 3
								i32.const 2
								i32.const 1
								i32.add
								i32.eq
								if (result i32)
									i32.const 8
									call $alloc
									local.tee $str_ptr
									i32.const 0
									i32.store offset=0 align=4
									local.get $str_ptr
									i32.const 2
									i32.store offset=4 align=4
									local.get $str_ptr

								else
									i32.const 8
									call $alloc
									local.tee $str_ptr
									i32.const 2
									i32.store offset=0 align=4
									local.get $str_ptr
									i32.const 2
									i32.store offset=4 align=4
									local.get $str_ptr

								end
								local.set $b
								call $print_val
								call $print_space
								i32.const 19
								i32.const 1
								call $print_string
								call $print_equal
								local.get $b
								local.tee $str_ptr
								i32.load offset=0 align=4
								local.get $str_ptr
								i32.load offset=4 align=4
								call $print_double_quote
								call $print_string
								call $print_double_quote
								call $print_colon
								i32.const 20
								i32.const 6
								call $print_string
								call $print_new_line
								i32.const 123
								i32.const 0
								call $pair_con_nogc_i32_nogc_i32
								local.set $c
								call $print_val
								call $print_space
								i32.const 26
								i32.const 1
								call $print_string
								call $print_equal
								local.get $c
								call $pair_print_<i*b>
								call $print_colon
								i32.const 27
								i32.const 12
								call $print_string
								call $print_new_line
								local.get $c
								i32.load offset=4 align=4
								if (result i32)
									local.get $c
									i32.load offset=0 align=4
									i32.const 2
									i32.mul

								else
									local.get $c
									i32.load offset=0 align=4
									i32.const 2
									i32.div_s

								end
								local.set $d
								call $print_val
								call $print_space
								i32.const 39
								i32.const 1
								call $print_string
								call $print_equal
								local.get $d
								call $print_int
								call $print_colon
								i32.const 40
								i32.const 3
								call $print_string
								call $print_new_line
								i32.const 4
								call $alloc
								local.tee $closure_ptr
								local.get $__fptr
								i32.store offset=0 align=4
								local.get $closure_ptr
								local.set $e
								call $print_val
								call $print_space
								i32.const 43
								i32.const 1
								call $print_string
								call $print_colon
								i32.const 44
								i32.const 15
								call $print_string
								call $print_new_line
								local.get $e
								local.tee $__fptr
								i32.const 0
								local.get $__fptr
								i32.load offset=0 align=4
								call_indirect $function (type $function)
								local.get $e
								local.tee $__fptr
								i32.const 123
								local.get $__fptr
								i32.load offset=0 align=4
								call_indirect $function (type $function)
								call $pair_con_nogc_i32_nogc_i32
								local.set $f
								call $print_val
								call $print_space
								i32.const 59
								i32.const 1
								call $print_string
								call $print_equal
								local.get $f
								call $pair_print_<s*s>
								call $print_colon
								i32.const 60
								i32.const 17
								call $print_string
								call $print_new_line
								i32.const 4
								call $alloc
								local.tee $closure_ptr
								local.get $__fptr
								i32.store offset=0 align=4
								local.get $closure_ptr
								local.set $g
								call $print_val
								call $print_space
								i32.const 77
								i32.const 1
								call $print_string
								call $print_colon
								i32.const 78
								i32.const 30
								call $print_string
								call $print_new_line
								local.get $g
								local.tee $__fptr
								i32.const 4
								call $alloc
								local.tee $closure_ptr
								local.get $__fptr
								i32.store offset=0 align=4
								local.get $closure_ptr
								local.get $__fptr
								i32.load offset=0 align=4
								call_indirect $function (type $function)
								local.tee $__fptr
								i32.const 456
								local.get $__fptr
								i32.load offset=0 align=4
								call_indirect $function (type $function)
								local.set $i
								call $print_val
								call $print_space
								i32.const 108
								i32.const 1
								call $print_string
								call $print_equal
								local.get $i
								call $print_int
								call $print_colon
								i32.const 109
								i32.const 3
								call $print_string
								call $print_new_line
)
							(func $alloc (type $alloc_sig)(param $size i32) (result i32)
							(local $old i32)
							global.get $alloc_ptr
							local.set $old
							local.get $old
							local.get $size
							i32.add
							global.set $alloc_ptr
							local.get $old
)
						(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
						(local $pair_addr i32)
						i32.const 8
						call $alloc
						local.tee $pair_addr
						local.get 0
						i32.store offset=0 align=4
						local.get $pair_addr
						local.get 1
						i32.store offset=4 align=4
						local.get $pair_addr
)
					(func $function3 (type $function)(param $non_recursive_closure i32)(param $z i32) (result i32)
					(local $str_ptr i32)
					(local $closure_ptr i32)
					(local $__fptr i32)
					local.get $non_recursive_closure
					i32.load offset=0 align=4
					local.set $__fptr
					local.get $z
					i32.const 2
					i32.mul
)
				(func $function1 (type $function)(param $g i32)(param $h i32) (result i32)
				(local $str_ptr i32)
				(local $closure_ptr i32)
				(local $__fptr i32)
				local.get $g
				i32.load offset=0 align=4
				local.set $__fptr
				i32.const 8
				call $alloc
				local.tee $closure_ptr
				local.get $__fptr
				i32.store offset=0 align=4
				local.get $closure_ptr
				local.get $h
				i32.store offset=4 align=4
				local.get $closure_ptr
)
			(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
			(local $h i32)
			(local $str_ptr i32)
			(local $closure_ptr i32)
			(local $__fptr i32)
			local.get $non_recursive_closure
			i32.load offset=4 align=4
			local.set $h
			local.get $non_recursive_closure
			i32.load offset=0 align=4
			local.set $__fptr
			local.get $h
			local.tee $__fptr
			local.get $x
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			local.get $h
			local.tee $__fptr
			i32.const 123
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			i32.add
)
		(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
										(table $function 4 funcref)
										(global $alloc_ptr (mut i32) i32.const 0)
										(export "__cml_main" (func $__cml_main))
										(start $__cml_main)										(elem (table $function)(offset i32.const 0)funcref (item ref.func $function3)
(item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
										(data $linear_memory(offset i32.const 109) "int")
										(data $linear_memory(offset i32.const 108) "i")
										(data $linear_memory(offset i32.const 78) "((int -> int) -> (int -> int))")
										(data $linear_memory(offset i32.const 77) "g")
										(data $linear_memory(offset i32.const 60) "(string * string)")
										(data $linear_memory(offset i32.const 59) "f")
										(data $linear_memory(offset i32.const 44) "(int -> string)")
										(data $linear_memory(offset i32.const 43) "e")
										(data $linear_memory(offset i32.const 40) "int")
										(data $linear_memory(offset i32.const 39) "d")
										(data $linear_memory(offset i32.const 27) "(int * bool)")
										(data $linear_memory(offset i32.const 26) "c")
										(data $linear_memory(offset i32.const 20) "string")
										(data $linear_memory(offset i32.const 19) "b")
										(data $linear_memory(offset i32.const 16) "int")
										(data $linear_memory(offset i32.const 15) "a")
										(data $linear_memory(offset i32.const 8) "nonzero")
										(data $linear_memory(offset i32.const 4) "zero")
										(data $linear_memory(offset i32.const 2) "NG")
										(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
				(func $__cml_main (type $entry_point) 
				(local $e i32)
				(local $str_ptr i32)
				(local $closure_ptr i32)
				(local $__fptr i32)
				i32.const 28
				global.set $alloc_ptr
				i32.const 4
				call $alloc
				local.tee $closure_ptr
				local.get $__fptr
				i32.store offset=0 align=4
				local.get $closure_ptr
				local.set $e
				call $print_val
				call $print_space
				i32.const 11
				i32.const 1
				call $print_string
				call $print_colon
				i32.const 12
				i32.const 15
				call $print_string
				call $print_new_line
)
			(func $alloc (type $alloc_sig)(param $size i32) (result i32)
			(local $old i32)
			global.get $alloc_ptr
			local.set $old
			local.get $old
			local.get $size
			i32.add
			global.set $alloc_ptr
			local.get $old
)
		(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
				(table $function 1 funcref)
				(global $alloc_ptr (mut i32) i32.const 0)
				(export "__cml_main" (func $__cml_main))
				(start $__cml_main)				(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
				(data $linear_memory(offset i32.const 12) "(int -> string)")
				(data $linear_memory(offset i32.const 11) "e")
				(data $linear_memory(offset i32.const 4) "nonzero")
				(data $linear_memory(offset i32.const 0) "zero")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $e i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 28
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 11
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 12
		i32.const 15
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 12) "(int -> string)")
	(data $linear_memory(offset i32.const 11) "e")
	(data $linear_memory(offset i32.const 4) "nonzero")
	(data $linear_memory(offset i32.const 0) "zero")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $f i32)
		(local $e i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 48
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 11
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 12
		i32.const 15
		call $print_string
		call $print_new_line
		local.get $e
		local.tee $__fptr
		i32.const 0
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $e
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		call $pair_con_nogc_i32_nogc_i32
		local.set $f
		call $print_val
		call $print_space
		i32.const 27
		i32.const 1
		call $print_string
		call $print_equal
		local.get $f
		call $pair_print_<s*s>
		call $print_colon
		i32.const 28
		i32.const 17
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 28) "(string * string)")
	(data $linear_memory(offset i32.const 27) "f")
	(data $linear_memory(offset i32.const 12) "(int -> string)")
	(data $linear_memory(offset i32.const 11) "e")
	(data $linear_memory(offset i32.const 4) "nonzero")
	(data $linear_memory(offset i32.const 0) "zero")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 8
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 1
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 1) "int")
	(data $linear_memory(offset i32.const 0) "a")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 16
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 4
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 5
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 8
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 9
		i32.const 6
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 32
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 4
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 5
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 8
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 9
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 16
		i32.const 12
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 16) "(int * bool)")
	(data $linear_memory(offset i32.const 15) "c")
	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 36
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 4
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 5
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 8
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 9
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 16
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 28
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 29
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 29) "int")
	(data $linear_memory(offset i32.const 28) "d")
	(data $linear_memory(offset i32.const 16) "(int * bool)")
	(data $linear_memory(offset i32.const 15) "c")
	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $e i32)
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 60
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 16
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 19
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 20
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 26
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 27
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 39
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 40
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 44
		i32.const 15
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $f i32)
		(local $e i32)
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 80
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 16
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 19
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 20
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 26
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 27
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 39
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 40
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 44
		i32.const 15
		call $print_string
		call $print_new_line
		local.get $e
		local.tee $__fptr
		i32.const 0
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $e
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		call $pair_con_nogc_i32_nogc_i32
		local.set $f
		call $print_val
		call $print_space
		i32.const 59
		i32.const 1
		call $print_string
		call $print_equal
		local.get $f
		call $pair_print_<s*s>
		call $print_colon
		i32.const 60
		i32.const 17
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 60) "(string * string)")
	(data $linear_memory(offset i32.const 59) "f")
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $g i32)(param $h i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $g i32)
		(local $f i32)
		(local $e i32)
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 112
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 16
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 19
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 20
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 26
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 27
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 39
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 40
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 44
		i32.const 15
		call $print_string
		call $print_new_line
		local.get $e
		local.tee $__fptr
		i32.const 0
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $e
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		call $pair_con_nogc_i32_nogc_i32
		local.set $f
		call $print_val
		call $print_space
		i32.const 59
		i32.const 1
		call $print_string
		call $print_equal
		local.get $f
		call $pair_print_<s*s>
		call $print_colon
		i32.const 60
		i32.const 17
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $g
		call $print_val
		call $print_space
		i32.const 77
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 78
		i32.const 30
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function1 (type $function)(param $g i32)(param $h i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $g
		i32.load offset=0 align=4
		local.set $__fptr
		i32.const 8
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $h
		i32.store offset=4 align=4
		local.get $closure_ptr
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $h i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=4 align=4
		local.set $h
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $h
		local.tee $__fptr
		local.get $x
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $h
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.add
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 3 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 78) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 77) "g")
	(data $linear_memory(offset i32.const 60) "(string * string)")
	(data $linear_memory(offset i32.const 59) "f")
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
RuntimeError: undefined element: out of bounds table access
    at function2 (<module>[19]:0x3a1)
    at __cml_main (<module>[15]:0x2e3)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $z i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $i i32)
		(local $g i32)
		(local $f i32)
		(local $e i32)
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 116
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 16
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 19
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 20
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 26
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 27
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 39
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 40
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 44
		i32.const 15
		call $print_string
		call $print_new_line
		local.get $e
		local.tee $__fptr
		i32.const 0
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $e
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		call $pair_con_nogc_i32_nogc_i32
		local.set $f
		call $print_val
		call $print_space
		i32.const 59
		i32.const 1
		call $print_string
		call $print_equal
		local.get $f
		call $pair_print_<s*s>
		call $print_colon
		i32.const 60
		i32.const 17
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $g
		call $print_val
		call $print_space
		i32.const 77
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 78
		i32.const 30
		call $print_string
		call $print_new_line
		local.get $g
		local.tee $__fptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.tee $__fptr
		i32.const 456
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $i
		call $print_val
		call $print_space
		i32.const 108
		i32.const 1
		call $print_string
		call $print_equal
		local.get $i
		call $print_int
		call $print_colon
		i32.const 109
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function3 (type $function)(param $non_recursive_closure i32)(param $z i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $z
		i32.const 2
		i32.mul
)
	(func $function1 (type $function)(param $g i32)(param $h i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $g
		i32.load offset=0 align=4
		local.set $__fptr
		i32.const 8
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $h
		i32.store offset=4 align=4
		local.get $closure_ptr
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $h i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=4 align=4
		local.set $h
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $h
		local.tee $__fptr
		local.get $x
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $h
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.add
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 4 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function3)
(item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 109) "int")
	(data $linear_memory(offset i32.const 108) "i")
	(data $linear_memory(offset i32.const 78) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 77) "g")
	(data $linear_memory(offset i32.const 60) "(string * string)")
	(data $linear_memory(offset i32.const 59) "f")
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 8
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 1
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 1) "int")
	(data $linear_memory(offset i32.const 0) "a")
)
generated imports
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 8
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 1
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 1) "int")
	(data $linear_memory(offset i32.const 0) "a")
)
generated imports
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 8
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 1
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 1) "int")
	(data $linear_memory(offset i32.const 0) "a")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 16
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 4
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 5
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 8
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 9
		i32.const 6
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 32
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 4
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 5
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 8
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 9
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 16
		i32.const 12
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 16) "(int * bool)")
	(data $linear_memory(offset i32.const 15) "c")
	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 36
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 4
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 5
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 8
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 9
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 16
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 28
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 29
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 29) "int")
	(data $linear_memory(offset i32.const 28) "d")
	(data $linear_memory(offset i32.const 16) "(int * bool)")
	(data $linear_memory(offset i32.const 15) "c")
	(data $linear_memory(offset i32.const 9) "string")
	(data $linear_memory(offset i32.const 8) "b")
	(data $linear_memory(offset i32.const 5) "int")
	(data $linear_memory(offset i32.const 4) "a")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $e i32)
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 60
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 16
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 19
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 20
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 26
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 27
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 39
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 40
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 44
		i32.const 15
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $e i32)(param $x i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $f i32)
		(local $e i32)
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 80
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 16
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 19
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 20
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 26
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 27
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 39
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 40
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 44
		i32.const 15
		call $print_string
		call $print_new_line
		local.get $e
		local.tee $__fptr
		i32.const 0
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $e
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		call $pair_con_nogc_i32_nogc_i32
		local.set $f
		call $print_val
		call $print_space
		i32.const 59
		i32.const 1
		call $print_string
		call $print_equal
		local.get $f
		call $pair_print_<s*s>
		call $print_colon
		i32.const 60
		i32.const 17
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 60) "(string * string)")
	(data $linear_memory(offset i32.const 59) "f")
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $g i32)(param $h i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $g i32)
		(local $f i32)
		(local $e i32)
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 112
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 16
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 19
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 20
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 26
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 27
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 39
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 40
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 44
		i32.const 15
		call $print_string
		call $print_new_line
		local.get $e
		local.tee $__fptr
		i32.const 0
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $e
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		call $pair_con_nogc_i32_nogc_i32
		local.set $f
		call $print_val
		call $print_space
		i32.const 59
		i32.const 1
		call $print_string
		call $print_equal
		local.get $f
		call $pair_print_<s*s>
		call $print_colon
		i32.const 60
		i32.const 17
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $g
		call $print_val
		call $print_space
		i32.const 77
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 78
		i32.const 30
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function1 (type $function)(param $g i32)(param $h i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $g
		i32.load offset=0 align=4
		local.set $__fptr
		i32.const 8
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $h
		i32.store offset=4 align=4
		local.get $closure_ptr
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $h i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=4 align=4
		local.set $h
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $h
		local.tee $__fptr
		local.get $x
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $h
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.add
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 3 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 78) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 77) "g")
	(data $linear_memory(offset i32.const 60) "(string * string)")
	(data $linear_memory(offset i32.const 59) "f")
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
RuntimeError: undefined element: out of bounds table access
    at function2 (<module>[19]:0x3a1)
    at __cml_main (<module>[15]:0x2e3)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $z i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $i i32)
		(local $g i32)
		(local $f i32)
		(local $e i32)
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 116
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 16
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 19
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 20
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 26
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 27
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 39
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 40
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 44
		i32.const 15
		call $print_string
		call $print_new_line
		local.get $e
		local.tee $__fptr
		i32.const 0
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $e
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		call $pair_con_nogc_i32_nogc_i32
		local.set $f
		call $print_val
		call $print_space
		i32.const 59
		i32.const 1
		call $print_string
		call $print_equal
		local.get $f
		call $pair_print_<s*s>
		call $print_colon
		i32.const 60
		i32.const 17
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $g
		call $print_val
		call $print_space
		i32.const 77
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 78
		i32.const 30
		call $print_string
		call $print_new_line
		local.get $g
		local.tee $__fptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.tee $__fptr
		i32.const 456
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $i
		call $print_val
		call $print_space
		i32.const 108
		i32.const 1
		call $print_string
		call $print_equal
		local.get $i
		call $print_int
		call $print_colon
		i32.const 109
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function3 (type $function)(param $non_recursive_closure i32)(param $z i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $z
		i32.const 2
		i32.mul
)
	(func $function1 (type $function)(param $g i32)(param $h i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $g
		i32.load offset=0 align=4
		local.set $__fptr
		i32.const 8
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $h
		i32.store offset=4 align=4
		local.get $closure_ptr
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $h i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=4 align=4
		local.set $h
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $h
		local.tee $__fptr
		local.get $x
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $h
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.add
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 4 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function3)
(item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 109) "int")
	(data $linear_memory(offset i32.const 108) "i")
	(data $linear_memory(offset i32.const 78) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 77) "g")
	(data $linear_memory(offset i32.const 60) "(string * string)")
	(data $linear_memory(offset i32.const 59) "f")
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
generated imports
Invalid string passed to runtime! 1196313423 1869768058
RuntimeError: undefined element: out of bounds table access
    at __cml_main (<module>[15]:0x352)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $g i32)(param $h i32) (result i32) ))
	(type $pair_print_<i*b>(func (param $__pair_addr i32)))
	(type $pair_print_<s*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<i*b> (type $pair_print_<i*b>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_bool
		call $print_rparen
)
	(func $pair_print_<s*s> (type $pair_print_<s*s>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $g i32)
		(local $i i32)
		(local $g i32)
		(local $f i32)
		(local $e i32)
		(local $d i32)
		(local $c i32)
		(local $b i32)
		(local $a i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 144
		global.set $alloc_ptr
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.mul
		local.set $a
		call $print_val
		call $print_space
		i32.const 15
		i32.const 1
		call $print_string
		call $print_equal
		local.get $a
		call $print_int
		call $print_colon
		i32.const 16
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 3
		i32.const 2
		i32.const 1
		i32.add
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 0
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 2
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 2
			i32.store offset=4 align=4
			local.get $str_ptr

		end
		local.set $b
		call $print_val
		call $print_space
		i32.const 19
		i32.const 1
		call $print_string
		call $print_equal
		local.get $b
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 20
		i32.const 6
		call $print_string
		call $print_new_line
		i32.const 123
		i32.const 0
		call $pair_con_nogc_i32_nogc_i32
		local.set $c
		call $print_val
		call $print_space
		i32.const 26
		i32.const 1
		call $print_string
		call $print_equal
		local.get $c
		call $pair_print_<i*b>
		call $print_colon
		i32.const 27
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $c
		i32.load offset=4 align=4
		if (result i32)
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.mul

		else
			local.get $c
			i32.load offset=0 align=4
			i32.const 2
			i32.div_s

		end
		local.set $d
		call $print_val
		call $print_space
		i32.const 39
		i32.const 1
		call $print_string
		call $print_equal
		local.get $d
		call $print_int
		call $print_colon
		i32.const 40
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $e
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 44
		i32.const 15
		call $print_string
		call $print_new_line
		local.get $e
		local.tee $__fptr
		i32.const 0
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $e
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		call $pair_con_nogc_i32_nogc_i32
		local.set $f
		call $print_val
		call $print_space
		i32.const 59
		i32.const 1
		call $print_string
		call $print_equal
		local.get $f
		call $pair_print_<s*s>
		call $print_colon
		i32.const 60
		i32.const 17
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $g
		call $print_val
		call $print_space
		i32.const 77
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 78
		i32.const 30
		call $print_string
		call $print_new_line
		local.get $g
		local.tee $__fptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.tee $__fptr
		i32.const 456
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $i
		call $print_val
		call $print_space
		i32.const 108
		i32.const 1
		call $print_string
		call $print_equal
		local.get $i
		call $print_int
		call $print_colon
		i32.const 109
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $g
		call $print_val
		call $print_space
		i32.const 112
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 113
		i32.const 30
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function4 (type $function)(param $g i32)(param $h i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $g
		i32.load offset=0 align=4
		local.set $__fptr
		i32.const 8
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $h
		i32.store offset=4 align=4
		local.get $closure_ptr
)
	(func $function5 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $h i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=4 align=4
		local.set $h
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $h
		local.tee $__fptr
		local.get $x
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $h
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.add
)
	(func $function3 (type $function)(param $non_recursive_closure i32)(param $z i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $z
		i32.const 2
		i32.mul
)
	(func $function1 (type $function)(param $g i32)(param $h i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $g
		i32.load offset=0 align=4
		local.set $__fptr
		i32.const 8
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $h
		i32.store offset=4 align=4
		local.get $closure_ptr
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $h i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=4 align=4
		local.set $h
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $h
		local.tee $__fptr
		local.get $x
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $h
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.add
)
	(func $function0 (type $function)(param $e i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $e
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 4
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 4
			i32.store offset=4 align=4
			local.get $str_ptr

		else
			i32.const 8
			call $alloc
			local.tee $str_ptr
			i32.const 8
			i32.store offset=0 align=4
			local.get $str_ptr
			i32.const 7
			i32.store offset=4 align=4
			local.get $str_ptr

		end
)
	(table $function 6 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function5)
(item ref.func $function4)
(item ref.func $function3)
(item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 113) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 112) "g")
	(data $linear_memory(offset i32.const 109) "int")
	(data $linear_memory(offset i32.const 108) "i")
	(data $linear_memory(offset i32.const 78) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 77) "g")
	(data $linear_memory(offset i32.const 60) "(string * string)")
	(data $linear_memory(offset i32.const 59) "f")
	(data $linear_memory(offset i32.const 44) "(int -> string)")
	(data $linear_memory(offset i32.const 43) "e")
	(data $linear_memory(offset i32.const 40) "int")
	(data $linear_memory(offset i32.const 39) "d")
	(data $linear_memory(offset i32.const 27) "(int * bool)")
	(data $linear_memory(offset i32.const 26) "c")
	(data $linear_memory(offset i32.const 20) "string")
	(data $linear_memory(offset i32.const 19) "b")
	(data $linear_memory(offset i32.const 16) "int")
	(data $linear_memory(offset i32.const 15) "a")
	(data $linear_memory(offset i32.const 8) "nonzero")
	(data $linear_memory(offset i32.const 4) "zero")
	(data $linear_memory(offset i32.const 2) "NG")
	(data $linear_memory(offset i32.const 0) "OK")
)
Failed to compile Wasm WebAssembly translation error: Error when converting wat: duplicate local identifier
     --> <anon>:65:10
      |
   65 |         (local $g i32)
      |          ^
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $g i32)(param $h i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $g i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 32
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $g
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 1
		i32.const 30
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $g i32)(param $h i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $g
		i32.load offset=0 align=4
		local.set $__fptr
		i32.const 8
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $h
		i32.store offset=4 align=4
		local.get $closure_ptr
)
	(func $function1 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $h i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=4 align=4
		local.set $h
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $h
		local.tee $__fptr
		local.get $x
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $h
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.add
)
	(table $function 2 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 1) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "g")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $z i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $i i32)
		(local $g i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 36
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $g
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 1
		i32.const 30
		call $print_string
		call $print_new_line
		local.get $g
		local.tee $__fptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.tee $__fptr
		i32.const 456
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $i
		call $print_val
		call $print_space
		i32.const 31
		i32.const 1
		call $print_string
		call $print_equal
		local.get $i
		call $print_int
		call $print_colon
		i32.const 32
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $z i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $z
		i32.const 2
		i32.mul
)
	(func $function0 (type $function)(param $g i32)(param $h i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $g
		i32.load offset=0 align=4
		local.set $__fptr
		i32.const 8
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $h
		i32.store offset=4 align=4
		local.get $closure_ptr
)
	(func $function1 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $h i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=4 align=4
		local.set $h
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $h
		local.tee $__fptr
		local.get $x
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $h
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.add
)
	(table $function 3 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 32) "int")
	(data $linear_memory(offset i32.const 31) "i")
	(data $linear_memory(offset i32.const 1) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "g")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $j i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $j i32)
		(local $i i32)
		(local $g i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 52
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $g
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 1
		i32.const 30
		call $print_string
		call $print_new_line
		local.get $g
		local.tee $__fptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.tee $__fptr
		i32.const 456
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $i
		call $print_val
		call $print_space
		i32.const 31
		i32.const 1
		call $print_string
		call $print_equal
		local.get $i
		call $print_int
		call $print_colon
		i32.const 32
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $j
		call $print_val
		call $print_space
		i32.const 35
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 36
		i32.const 12
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function3 (type $function)(param $j i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $j
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $j
			local.tee $__fptr
			local.get $x
			i32.const 1
			i32.sub
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			local.get $x
			i32.mul

		end
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $z i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $z
		i32.const 2
		i32.mul
)
	(func $function0 (type $function)(param $g i32)(param $h i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $g
		i32.load offset=0 align=4
		local.set $__fptr
		i32.const 8
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.get $h
		i32.store offset=4 align=4
		local.get $closure_ptr
)
	(func $function1 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $h i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=4 align=4
		local.set $h
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $h
		local.tee $__fptr
		local.get $x
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $h
		local.tee $__fptr
		i32.const 123
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		i32.add
)
	(table $function 4 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function3)
(item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 36) "(int -> int)")
	(data $linear_memory(offset i32.const 35) "j")
	(data $linear_memory(offset i32.const 32) "int")
	(data $linear_memory(offset i32.const 31) "i")
	(data $linear_memory(offset i32.const 1) "((int -> int) -> (int -> int))")
	(data $linear_memory(offset i32.const 0) "g")
)
generated imports
RuntimeError: undefined element: out of bounds table access
    at __cml_main (<module>[13]:0x1c5)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $j i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $j i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 16
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $j
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 1
		i32.const 12
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $j i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $j
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $j
			local.tee $__fptr
			local.get $x
			i32.const 1
			i32.sub
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			local.get $x
			i32.mul

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 1) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "j")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $j i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $k i32)
		(local $j i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 20
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $j
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 1
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $j
		local.tee $__fptr
		i32.const 3
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $k
		call $print_val
		call $print_space
		i32.const 13
		i32.const 1
		call $print_string
		call $print_equal
		local.get $k
		call $print_int
		call $print_colon
		i32.const 14
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $j i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $j
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $j
			local.tee $__fptr
			local.get $x
			i32.const 1
			i32.sub
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			local.get $x
			i32.mul

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 14) "int")
	(data $linear_memory(offset i32.const 13) "k")
	(data $linear_memory(offset i32.const 1) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "j")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $j i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $it i32)
		(local $k i32)
		(local $j i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 24
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $j
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 1
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $j
		local.tee $__fptr
		i32.const 3
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $k
		call $print_val
		call $print_space
		i32.const 13
		i32.const 1
		call $print_string
		call $print_equal
		local.get $k
		call $print_int
		call $print_colon
		i32.const 14
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 1234
		i32.const 5678
		i32.add
		local.set $it
		call $print_val
		call $print_space
		i32.const 17
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 19
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $j i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $j
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $j
			local.tee $__fptr
			local.get $x
			i32.const 1
			i32.sub
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			local.get $x
			i32.mul

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 19) "int")
	(data $linear_memory(offset i32.const 17) "it")
	(data $linear_memory(offset i32.const 14) "int")
	(data $linear_memory(offset i32.const 13) "k")
	(data $linear_memory(offset i32.const 1) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "j")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $l i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $l i32)
		(local $it i32)
		(local $k i32)
		(local $j i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 44
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $j
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 1
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $j
		local.tee $__fptr
		i32.const 3
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $k
		call $print_val
		call $print_space
		i32.const 13
		i32.const 1
		call $print_string
		call $print_equal
		local.get $k
		call $print_int
		call $print_colon
		i32.const 14
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 1234
		i32.const 5678
		i32.add
		local.set $it
		call $print_val
		call $print_space
		i32.const 17
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 19
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $l
		call $print_val
		call $print_space
		i32.const 22
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 23
		i32.const 17
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function1 (type $function)(param $l i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $l
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		local.get $x
		call $pair_con_nogc_i32_nogc_i32
)
	(func $function0 (type $function)(param $j i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $j
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $j
			local.tee $__fptr
			local.get $x
			i32.const 1
			i32.sub
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			local.get $x
			i32.mul

		end
)
	(table $function 2 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 23) "('e -> ('e * 'e))")
	(data $linear_memory(offset i32.const 22) "l")
	(data $linear_memory(offset i32.const 19) "int")
	(data $linear_memory(offset i32.const 17) "it")
	(data $linear_memory(offset i32.const 14) "int")
	(data $linear_memory(offset i32.const 13) "k")
	(data $linear_memory(offset i32.const 1) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "j")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<<?h*?i>->?i*i>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<<?h*?i>->?i*i> (type $pair_print_<<?h*?i>->?i*i>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		drop
		i32.const 41
		i32.const 17
		call $print_string
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_int
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $m i32)
		(local $l i32)
		(local $it i32)
		(local $k i32)
		(local $j i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 84
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $j
		call $print_val
		call $print_space
		i32.const 0
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 1
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $j
		local.tee $__fptr
		i32.const 3
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $k
		call $print_val
		call $print_space
		i32.const 13
		i32.const 1
		call $print_string
		call $print_equal
		local.get $k
		call $print_int
		call $print_colon
		i32.const 14
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 1234
		i32.const 5678
		i32.add
		local.set $it
		call $print_val
		call $print_space
		i32.const 17
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 19
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $l
		call $print_val
		call $print_space
		i32.const 22
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 23
		i32.const 17
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		i32.const 123
		call $pair_con_gc_i32_nogc_i32
		local.set $m
		call $print_val
		call $print_space
		i32.const 40
		i32.const 1
		call $print_string
		call $print_equal
		local.get $m
		call $pair_print_<<?h*?i>->?i*i>
		call $print_colon
		i32.const 58
		i32.const 25
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_gc_i32_nogc_i32 (type $pair_con_gc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.load offset=4 align=4
)
	(func $function1 (type $function)(param $l i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $l
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		local.get $x
		call $pair_con_nogc_i32_nogc_i32
)
	(func $function0 (type $function)(param $j i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $j
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $j
			local.tee $__fptr
			local.get $x
			i32.const 1
			i32.sub
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			local.get $x
			i32.mul

		end
)
	(table $function 3 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 58) "((('h * 'i) -> 'i) * int)")
	(data $linear_memory(offset i32.const 41) "(('h * 'i) -> 'i)")
	(data $linear_memory(offset i32.const 40) "m")
	(data $linear_memory(offset i32.const 23) "('e -> ('e * 'e))")
	(data $linear_memory(offset i32.const 22) "l")
	(data $linear_memory(offset i32.const 19) "int")
	(data $linear_memory(offset i32.const 17) "it")
	(data $linear_memory(offset i32.const 14) "int")
	(data $linear_memory(offset i32.const 13) "k")
	(data $linear_memory(offset i32.const 1) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "j")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $non_recursive_closure i32)(param $x i32) (result i32) ))
	(type $pair_print_<<?h*?i>->?i*i>(func (param $__pair_addr i32)))
	(type $pair_print_<i*s>(func (param $__pair_addr i32)))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $pair_con_gc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $pair_con_nogc_i32_nogc_i32(func (param $e1 i32)(param $e2 i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $pair_print_<<?h*?i>->?i*i> (type $pair_print_<<?h*?i>->?i*i>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		drop
		i32.const 44
		i32.const 17
		call $print_string
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		call $print_int
		call $print_rparen
)
	(func $pair_print_<i*s> (type $pair_print_<i*s>)
		(local $str_ptr i32)
		call $print_lparen
		local.get 0
		i32.load offset=0 align=4
		call $print_int
		call $print_comma
		local.get 0
		i32.load offset=4 align=4
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_rparen
)
	(func $__cml_main (type $entry_point) 
		(local $n i32)
		(local $m i32)
		(local $l i32)
		(local $it i32)
		(local $k i32)
		(local $j i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 104
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $j
		call $print_val
		call $print_space
		i32.const 3
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 4
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $j
		local.tee $__fptr
		i32.const 3
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $k
		call $print_val
		call $print_space
		i32.const 16
		i32.const 1
		call $print_string
		call $print_equal
		local.get $k
		call $print_int
		call $print_colon
		i32.const 17
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 1234
		i32.const 5678
		i32.add
		local.set $it
		call $print_val
		call $print_space
		i32.const 20
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 22
		i32.const 3
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $l
		call $print_val
		call $print_space
		i32.const 25
		i32.const 1
		call $print_string
		call $print_colon
		i32.const 26
		i32.const 17
		call $print_string
		call $print_new_line
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		i32.const 123
		call $pair_con_gc_i32_nogc_i32
		local.set $m
		call $print_val
		call $print_space
		i32.const 43
		i32.const 1
		call $print_string
		call $print_equal
		local.get $m
		call $pair_print_<<?h*?i>->?i*i>
		call $print_colon
		i32.const 61
		i32.const 25
		call $print_string
		call $print_new_line
		local.get $m
		i32.load offset=0 align=4
		local.tee $__fptr
		local.get $l
		local.tee $__fptr
		i32.const 456
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $m
		i32.load offset=0 align=4
		local.tee $__fptr
		local.get $l
		local.tee $__fptr
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 3
		i32.store offset=4 align=4
		local.get $str_ptr
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		call $pair_con_nogc_i32_nogc_i32
		local.set $n
		call $print_val
		call $print_space
		i32.const 86
		i32.const 1
		call $print_string
		call $print_equal
		local.get $n
		call $pair_print_<i*s>
		call $print_colon
		i32.const 87
		i32.const 14
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $pair_con_gc_i32_nogc_i32 (type $pair_con_gc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $pair_con_nogc_i32_nogc_i32 (type $pair_con_nogc_i32_nogc_i32)
		(local $pair_addr i32)
		i32.const 8
		call $alloc
		local.tee $pair_addr
		local.get 0
		i32.store offset=0 align=4
		local.get $pair_addr
		local.get 1
		i32.store offset=4 align=4
		local.get $pair_addr
)
	(func $function2 (type $function)(param $non_recursive_closure i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $non_recursive_closure
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.load offset=4 align=4
)
	(func $function1 (type $function)(param $l i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $l
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		local.get $x
		call $pair_con_nogc_i32_nogc_i32
)
	(func $function0 (type $function)(param $j i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $j
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 0
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $j
			local.tee $__fptr
			local.get $x
			i32.const 1
			i32.sub
			local.get $__fptr
			i32.load offset=0 align=4
			call_indirect $function (type $function)
			local.get $x
			i32.mul

		end
)
	(table $function 3 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function2)
(item ref.func $function1)
(item ref.func $function0)
)
	(data $linear_memory(offset i32.const 87) "(int * string)")
	(data $linear_memory(offset i32.const 86) "n")
	(data $linear_memory(offset i32.const 61) "((('h * 'i) -> 'i) * int)")
	(data $linear_memory(offset i32.const 44) "(('h * 'i) -> 'i)")
	(data $linear_memory(offset i32.const 43) "m")
	(data $linear_memory(offset i32.const 26) "('e -> ('e * 'e))")
	(data $linear_memory(offset i32.const 25) "l")
	(data $linear_memory(offset i32.const 22) "int")
	(data $linear_memory(offset i32.const 20) "it")
	(data $linear_memory(offset i32.const 17) "int")
	(data $linear_memory(offset i32.const 16) "k")
	(data $linear_memory(offset i32.const 4) "(int -> int)")
	(data $linear_memory(offset i32.const 3) "j")
	(data $linear_memory(offset i32.const 0) "abc")
)
generated imports
RuntimeError: undefined element: out of bounds table access
    at __cml_main (<module>[15]:0x2ad)
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $fib i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $fib i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 16
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $fib
		call $print_val
		call $print_space
		i32.const 0
		i32.const 3
		call $print_string
		call $print_colon
		i32.const 3
		i32.const 12
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $fib i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $fib
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 1
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $x
			i32.const 2
			i32.eq
			if (result i32)
				i32.const 1
			else
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 1
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 2
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				i32.add

			end

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 3) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fib")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $fib i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $it i32)
		(local $fib i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 24
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $fib
		call $print_val
		call $print_space
		i32.const 0
		i32.const 3
		call $print_string
		call $print_colon
		i32.const 3
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 3
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $it
		call $print_val
		call $print_space
		i32.const 15
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 17
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $fib i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $fib
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 1
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $x
			i32.const 2
			i32.eq
			if (result i32)
				i32.const 1
			else
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 1
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 2
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				i32.add

			end

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 17) "int")
	(data $linear_memory(offset i32.const 15) "it")
	(data $linear_memory(offset i32.const 3) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fib")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $fib i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $h i32)
		(local $it i32)
		(local $fib i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 28
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $fib
		call $print_val
		call $print_space
		i32.const 0
		i32.const 3
		call $print_string
		call $print_colon
		i32.const 3
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 3
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $it
		call $print_val
		call $print_space
		i32.const 15
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 17
		i32.const 3
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 4
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $h
		call $print_val
		call $print_space
		i32.const 20
		i32.const 1
		call $print_string
		call $print_equal
		local.get $h
		call $print_int
		call $print_colon
		i32.const 21
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $fib i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $fib
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 1
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $x
			i32.const 2
			i32.eq
			if (result i32)
				i32.const 1
			else
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 1
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 2
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				i32.add

			end

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 21) "int")
	(data $linear_memory(offset i32.const 20) "h")
	(data $linear_memory(offset i32.const 17) "int")
	(data $linear_memory(offset i32.const 15) "it")
	(data $linear_memory(offset i32.const 3) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fib")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $fib i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $j i32)
		(local $h i32)
		(local $it i32)
		(local $fib i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 32
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $fib
		call $print_val
		call $print_space
		i32.const 0
		i32.const 3
		call $print_string
		call $print_colon
		i32.const 3
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 3
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $it
		call $print_val
		call $print_space
		i32.const 15
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 17
		i32.const 3
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 4
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $h
		call $print_val
		call $print_space
		i32.const 20
		i32.const 1
		call $print_string
		call $print_equal
		local.get $h
		call $print_int
		call $print_colon
		i32.const 21
		i32.const 3
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 5
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $j
		call $print_val
		call $print_space
		i32.const 24
		i32.const 1
		call $print_string
		call $print_equal
		local.get $j
		call $print_int
		call $print_colon
		i32.const 25
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $fib i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $fib
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 1
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $x
			i32.const 2
			i32.eq
			if (result i32)
				i32.const 1
			else
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 1
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 2
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				i32.add

			end

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 25) "int")
	(data $linear_memory(offset i32.const 24) "j")
	(data $linear_memory(offset i32.const 21) "int")
	(data $linear_memory(offset i32.const 20) "h")
	(data $linear_memory(offset i32.const 17) "int")
	(data $linear_memory(offset i32.const 15) "it")
	(data $linear_memory(offset i32.const 3) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fib")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $fib i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $u i32)
		(local $j i32)
		(local $h i32)
		(local $it i32)
		(local $fib i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 36
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $fib
		call $print_val
		call $print_space
		i32.const 0
		i32.const 3
		call $print_string
		call $print_colon
		i32.const 3
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 3
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $it
		call $print_val
		call $print_space
		i32.const 15
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 17
		i32.const 3
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 4
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $h
		call $print_val
		call $print_space
		i32.const 20
		i32.const 1
		call $print_string
		call $print_equal
		local.get $h
		call $print_int
		call $print_colon
		i32.const 21
		i32.const 3
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 5
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $j
		call $print_val
		call $print_space
		i32.const 24
		i32.const 1
		call $print_string
		call $print_equal
		local.get $j
		call $print_int
		call $print_colon
		i32.const 25
		i32.const 3
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 6
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $u
		call $print_val
		call $print_space
		i32.const 28
		i32.const 1
		call $print_string
		call $print_equal
		local.get $u
		call $print_int
		call $print_colon
		i32.const 29
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $fib i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $fib
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 1
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $x
			i32.const 2
			i32.eq
			if (result i32)
				i32.const 1
			else
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 1
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 2
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				i32.add

			end

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 29) "int")
	(data $linear_memory(offset i32.const 28) "u")
	(data $linear_memory(offset i32.const 25) "int")
	(data $linear_memory(offset i32.const 24) "j")
	(data $linear_memory(offset i32.const 21) "int")
	(data $linear_memory(offset i32.const 20) "h")
	(data $linear_memory(offset i32.const 17) "int")
	(data $linear_memory(offset i32.const 15) "it")
	(data $linear_memory(offset i32.const 3) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fib")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $fib i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $fib i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 16
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $fib
		call $print_val
		call $print_space
		i32.const 0
		i32.const 3
		call $print_string
		call $print_colon
		i32.const 3
		i32.const 12
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $fib i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $fib
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 1
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $x
			i32.const 2
			i32.eq
			if (result i32)
				i32.const 1
			else
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 1
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 2
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				i32.add

			end

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 3) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fib")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $fib i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $it i32)
		(local $fib i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 24
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $fib
		call $print_val
		call $print_space
		i32.const 0
		i32.const 3
		call $print_string
		call $print_colon
		i32.const 3
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 10
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $it
		call $print_val
		call $print_space
		i32.const 15
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 17
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $fib i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $fib
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 1
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $x
			i32.const 2
			i32.eq
			if (result i32)
				i32.const 1
			else
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 1
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 2
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				i32.add

			end

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 17) "int")
	(data $linear_memory(offset i32.const 15) "it")
	(data $linear_memory(offset i32.const 3) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fib")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $fib i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $j i32)
		(local $it i32)
		(local $fib i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 28
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $fib
		call $print_val
		call $print_space
		i32.const 0
		i32.const 3
		call $print_string
		call $print_colon
		i32.const 3
		i32.const 12
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 10
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $it
		call $print_val
		call $print_space
		i32.const 15
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 17
		i32.const 3
		call $print_string
		call $print_new_line
		local.get $fib
		local.tee $__fptr
		i32.const 34
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $j
		call $print_val
		call $print_space
		i32.const 20
		i32.const 1
		call $print_string
		call $print_equal
		local.get $j
		call $print_int
		call $print_colon
		i32.const 21
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $fib i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $fib
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
		i32.const 1
		i32.eq
		if (result i32)
			i32.const 1
		else
			local.get $x
			i32.const 2
			i32.eq
			if (result i32)
				i32.const 1
			else
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 1
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				local.get $fib
				local.tee $__fptr
				local.get $x
				i32.const 2
				i32.sub
				local.get $__fptr
				i32.load offset=0 align=4
				call_indirect $function (type $function)
				i32.add

			end

		end
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 21) "int")
	(data $linear_memory(offset i32.const 20) "j")
	(data $linear_memory(offset i32.const 17) "int")
	(data $linear_memory(offset i32.const 15) "it")
	(data $linear_memory(offset i32.const 3) "(int -> int)")
	(data $linear_memory(offset i32.const 0) "fib")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $it i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 8
		global.set $alloc_ptr
		i32.const 123456
		local.set $it
		call $print_val
		call $print_space
		i32.const 0
		i32.const 2
		call $print_string
		call $print_equal
		local.get $it
		call $print_int
		call $print_colon
		i32.const 2
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(data $linear_memory(offset i32.const 2) "int")
	(data $linear_memory(offset i32.const 0) "it")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $id i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $id i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 16
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $id
		call $print_val
		call $print_space
		i32.const 0
		i32.const 2
		call $print_string
		call $print_colon
		i32.const 2
		i32.const 10
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $id i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $id
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 2) "('b -> 'b)")
	(data $linear_memory(offset i32.const 0) "id")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $id i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $ir i32)
		(local $id i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 20
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $id
		call $print_val
		call $print_space
		i32.const 0
		i32.const 2
		call $print_string
		call $print_colon
		i32.const 2
		i32.const 10
		call $print_string
		call $print_new_line
		local.get $id
		local.tee $__fptr
		i32.const 12345
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $ir
		call $print_val
		call $print_space
		i32.const 12
		i32.const 2
		call $print_string
		call $print_equal
		local.get $ir
		call $print_int
		call $print_colon
		i32.const 14
		i32.const 3
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $id i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $id
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 14) "int")
	(data $linear_memory(offset i32.const 12) "ir")
	(data $linear_memory(offset i32.const 2) "('b -> 'b)")
	(data $linear_memory(offset i32.const 0) "id")
)
generated imports
Execute finished
Wat to Wasm Builder and compiler started
A webassembly text passed 
(module
	(type $function(func (param $id i32)(param $x i32) (result i32) ))
	(type $alloc_sig(func (param $size i32) (result i32) ))
	(type $entry_point(func))
	(type $print_int(func (param $value i32)))
	(type $print_bool(func (param $value i32)))
	(type $print_string(func (param $ptr i32)(param $size i32)))
	(type $print_token(func))
	(import "env" "linear_memory" (memory $linear_memory 2))
	(import "env" "print_int" (func $print_int (type $print_int)))
	(import "env" "print_bool" (func $print_bool (type $print_bool)))
	(import "env" "print_string" (func $print_string (type $print_string)))
	(import "env" "print_lparen" (func $print_lparen (type $print_token)))
	(import "env" "print_rparen" (func $print_rparen (type $print_token)))
	(import "env" "print_val" (func $print_val (type $print_token)))
	(import "env" "print_comma" (func $print_comma (type $print_token)))
	(import "env" "print_equal" (func $print_equal (type $print_token)))
	(import "env" "print_colon" (func $print_colon (type $print_token)))
	(import "env" "print_arrow" (func $print_arrow (type $print_token)))
	(import "env" "print_space" (func $print_space (type $print_token)))
	(import "env" "print_double_quote" (func $print_double_quote (type $print_token)))
	(import "env" "print_new_line" (func $print_new_line (type $print_token)))
	(func $__cml_main (type $entry_point) 
		(local $tr i32)
		(local $ir i32)
		(local $id i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		i32.const 48
		global.set $alloc_ptr
		i32.const 4
		call $alloc
		local.tee $closure_ptr
		local.get $__fptr
		i32.store offset=0 align=4
		local.get $closure_ptr
		local.set $id
		call $print_val
		call $print_space
		i32.const 21
		i32.const 2
		call $print_string
		call $print_colon
		i32.const 23
		i32.const 10
		call $print_string
		call $print_new_line
		local.get $id
		local.tee $__fptr
		i32.const 12345
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $ir
		call $print_val
		call $print_space
		i32.const 33
		i32.const 2
		call $print_string
		call $print_equal
		local.get $ir
		call $print_int
		call $print_colon
		i32.const 35
		i32.const 3
		call $print_string
		call $print_new_line
		local.get $id
		local.tee $__fptr
		i32.const 8
		call $alloc
		local.tee $str_ptr
		i32.const 0
		i32.store offset=0 align=4
		local.get $str_ptr
		i32.const 21
		i32.store offset=4 align=4
		local.get $str_ptr
		local.get $__fptr
		i32.load offset=0 align=4
		call_indirect $function (type $function)
		local.set $tr
		call $print_val
		call $print_space
		i32.const 38
		i32.const 2
		call $print_string
		call $print_equal
		local.get $tr
		local.tee $str_ptr
		i32.load offset=0 align=4
		local.get $str_ptr
		i32.load offset=4 align=4
		call $print_double_quote
		call $print_string
		call $print_double_quote
		call $print_colon
		i32.const 40
		i32.const 6
		call $print_string
		call $print_new_line
)
	(func $alloc (type $alloc_sig)(param $size i32) (result i32)
		(local $old i32)
		global.get $alloc_ptr
		local.set $old
		local.get $old
		local.get $size
		i32.add
		global.set $alloc_ptr
		local.get $old
)
	(func $function0 (type $function)(param $id i32)(param $x i32) (result i32)
		(local $str_ptr i32)
		(local $closure_ptr i32)
		(local $__fptr i32)
		local.get $id
		i32.load offset=0 align=4
		local.set $__fptr
		local.get $x
)
	(table $function 1 funcref)
	(global $alloc_ptr (mut i32) i32.const 0)
	(export "__cml_main" (func $__cml_main))
	(start $__cml_main)	(elem (table $function)(offset i32.const 0)funcref (item ref.func $function0)
)
	(data $linear_memory(offset i32.const 40) "string")
	(data $linear_memory(offset i32.const 38) "tr")
	(data $linear_memory(offset i32.const 35) "int")
	(data $linear_memory(offset i32.const 33) "ir")
	(data $linear_memory(offset i32.const 23) "('b -> 'b)")
	(data $linear_memory(offset i32.const 21) "id")
	(data $linear_memory(offset i32.const 0) "hellocoremlandgoodbye")
)
generated imports
Execute finished
