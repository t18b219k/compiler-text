_require "basis.smi"

structure IDX =
struct 
    datatype idx =int_id of word32|text_id of string 
    val idxToString: idx->string
    datatype typeidx  = typeidx of idx  
    val typeidxToString:typeidx->string
    datatype funcidx =funcidx of idx 
    val funcidxToString:funcidx->string
    datatype tableidx = tableidx of idx
    val tableidxToString:tableidx->string
    datatype memidx  =memidx of idx
    val memidxToString:memidx->string
    datatype globalidx = globalidx of idx
    val globalidxToString:globalidx->string
    datatype elemidx = elemidx of idx
    val elemidxToString:elemidx->string
    datatype dataidx = dataidx of idx
    val dataidxToString:dataidx->string
    datatype localidx = localidx of idx
    val localidxToString:localidx->string
    datatype labelidx = labelidx of idx
    val labelidxToString:labelidx->string
end

structure WasmModule=
struct

    datatype numtype =i32|i64|f32|f64
    datatype limits = min of word32 | minmax of word32*word32
    datatype comment = line of string | block of string
    datatype label = label of string
    datatype vectype = v128
    datatype reftype = funcref | externref    
    datatype heaptype =func|extern
    datatype valtype = numtype of numtype | vectype of vectype | reftype of reftype
    datatype param = param of string * valtype 
    datatype result = result of valtype 
    datatype functype = functype of param list *  result list
    datatype memtype = memtype of limits
    datatype globaltype = const of valtype | mutable of valtype
    datatype tabletype = tabletype of limits*reftype
    datatype blocktype = blocktype of result option 
    
    datatype typeuse = name_only of IDX.typeidx | with_functype of IDX.typeidx * param list * result list
    datatype memarg =memarg of word32 * word32
    datatype instruction =
     (*制御構造*)
     block_i of label option * blocktype * instruction list
    |loop  of label option * blocktype * instruction list
    |if_    of label option * blocktype * instruction list* instruction list
    |nop
    |unreachable
    |br of label
    |br_if of label
    |br_table of label list* label
    |return
    |call of IDX.funcidx
    |call_indirect of IDX.tableidx * typeuse
    |drop
    |select
    (*local variable instruction*)
    |localget of IDX.localidx
    |localset of IDX.localidx 
    |localtee of IDX.localidx
    (*global variable instruction*) 
    |globalget of IDX.globalidx
    |globalset of IDX.globalidx
    (*table isntructions*)
    |tableget of IDX.tableidx
    |tableset of IDX.tableidx 
    |tablesize of IDX.tableidx
    |tablegrow of IDX.tableidx 
    |tablefill of IDX.tableidx
    |tablecopy of IDX.tableidx*IDX.tableidx
    |tableinit of IDX.tableidx*IDX.elemidx
    |elemdrop of IDX.elemidx
    (*memory instruction*)
    |i32load of memarg
    |i64load of memarg
    |f32load of memarg
    |f64load of memarg
    |i32load8_s of memarg
    |i32load8_u of memarg
    |i32load16_s of memarg
    |i32load16_u of memarg 
    |i64load8_s of memarg
    |i64load8_u of memarg
    |i64load16_s of memarg
    |i64load16_u of memarg 
    |i64load32_s of memarg
    |i64load32_u of memarg
    |i32store of memarg
    |i64store of memarg
    |f32store of memarg
    |f64store of memarg
    |i32store8 of memarg
    |i32store16 of memarg
    |i64store8 of memarg
    |i64store16 of memarg
    |i64store32 of memarg
    |memorysize
    |memorygrow
    |memoryfill
    |memorycopy 
    |memoryinit of IDX.dataidx
    |datadrop of IDX.dataidx
    (*数値演算命令*)
    |i32const of int32 | i64const of int64|f32const of real32|f64const of real
    (*count leading zeros*)
    |i32clz
    |i32ctz
    |i32popcnt
    |i32add
    |i32sub
    |i32mul
    |i32div_s
    |i32div_u
    |i32rem_s
    |i32rem_u
    |i32and
    |i32or
    |i32xor
    |i32shl
    |i32shr_s
    |i32shr_u
    |i32rotl
    |i32rotr
    |i64clz
    |i64ctz
    |i64popcnt
    |i64add
    |i64sub
    |i64mul
    |i64div_s
    |i64div_u
    |i64rem_s
    |i64rem_u
    |i64and
    |i64or
    |i64xor
    |i64shl
    |i64shr_s
    |i64shr_u
    |i64rotl
    |i64rotr
    |f32abs
    |f32neg
    |f32ceil
    |f32floor
    |f32trunc
    |f32nearest
    |f32sqrt
    |f32add
    |f32sub
    |f32mul
    |f32div
    |f32min
    |f32max
    |f32copysign
    |f64abs
    |f64neg
    |f64ceil
    |f64floor
    |f64trunc
    |f64nearest
    |f64sqrt
    |f64add
    |f64sub
    |f64mul
    |f64div
    |f64min
    |f64max
    |f64copysign        
    |i32eqz
    |i32eq
    |i32ne
    |i32lt_s
    |i32lt_u
    |i32gt_s
    |i32gt_u
    |i32le_s
    |i32le_u
    |i32ge_s
    |i32ge_u
    |i64eqz
    |i64eq
    |i64ne
    |i64lt_s
    |i64lt_u
    |i64gt_s
    |i64gt_u
    |i64le_s
    |i64le_u
    |i64ge_s
    |i64ge_u
    |f32eq
    |f32ne
    |f32lt
    |f32gt
    |f32le
    |f32ge
    |f64eq
    |f64ne
    |f64lt
    |f64gt
    |f64le
    |f64ge
    type expr = instruction list
    datatype type_definition = type_definition of string option * functype
    datatype import_desc = f of IDX.funcidx option  *typeuse | t of IDX.tableidx  option* tabletype  |m of IDX.memidx option * memtype  |g of IDX.globalidx option* globaltype
    datatype import = import of string*string*import_desc
    datatype local_ = local_ of IDX.localidx option * valtype
    type func =  IDX.funcidx option * typeuse * local_ list * instruction list 
    type table =  IDX.tableidx option * tabletype 
    type mem =  IDX.memidx option *memtype
    type global = IDX.globalidx option * globaltype *expr 
    datatype export_desc =func_e of IDX.funcidx | table_e of IDX.tableidx |memory_e of IDX.memidx | global_e of IDX.globalidx 
    datatype export = export of string * export_desc
    datatype start = start of IDX.funcidx
    datatype elemexpr =elemexpr of expr 
    datatype elemlist =elemlist of reftype * elemexpr list
    datatype elemmode = passive_elem_mode |active_elem_mode of IDX.tableidx * expr | declarative
    datatype elem = element of IDX.elemidx option * elemlist * elemmode
    datatype datamode = passive_data_mode | active_data_mode of IDX.memidx * expr 
    datatype data = data of IDX.dataidx option * datamode *string 
    type types = type_definition list
    type funcs = func list
    type tables = table list
    type mems =mem list 
    type globals = global list
    type elems =elem list
    type datas = data list 
    type imports = import list
    type exports =export list
    type module = {ty:types,im:imports,fn_:funcs,ta:tables,me:mems,gl:globals,ex:exports,st:start,el:elems,da:datas}
    val emptyModule:module
    val moduleToString:module->string
end
